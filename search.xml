<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/03/22/bi-ji/ssm/"/>
      <url>/2022/03/22/bi-ji/ssm/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-spring集成web环境"><a href="#1-spring集成web环境" class="headerlink" title="1. spring集成web环境"></a>1. spring集成web环境</h1><p><strong>applicationContext应用上下文获取方式</strong></p><p><a href="">Spring提供了一个监听器ContextLoaderListener,监听器内部加载spring配置文件,创建应用上下文对象,并存储到servletContext域中,提供客户端工具WebapplicationContextUtils来获得应用上下文</a>  </p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20220322160312159.png" alt="image-20220322160312159"> </p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20220322161155544.png" alt="image-20220322161155544"> </p><p> <img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20220322160428830.png" alt="image-20220322160428830"></p><h1 id="2-SpringMvc"><a href="#2-SpringMvc" class="headerlink" title="2.SpringMvc"></a>2.SpringMvc</h1><p><strong>springMvc的执行流程</strong></p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20220322181753691.png" alt="image-20220322181753691"> </p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20220322181933281.png" alt="image-20220322181933281"> </p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20220322182651740.png" alt="image-20220322182651740">  </p><p>tips:注解驱动默认处理器适配器会使用jackson转换bean对象,默认servlet处理器,处理器映射器找不到资源会使用tomcat处理静态资源</p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20220322230925945.png" alt="image-20220322230925945"> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2021/09/05/bi-ji/bi-ji/"/>
      <url>/2021/09/05/bi-ji/bi-ji/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1. mysql"></a>1. mysql</h1><h2 id="1-Mysql锁机制"><a href="#1-Mysql锁机制" class="headerlink" title="1. Mysql锁机制"></a>1. Mysql锁机制</h2><h3 id="1-1-锁介绍"><a href="#1-1-锁介绍" class="headerlink" title="1.1 锁介绍"></a>1.1 锁介绍</h3><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20211216103302545.png" alt="image-20211216103302545"> </p><ul><li><p>无锁</p><ul><li>单纯的查询(一致性非锁定读)，mysql不会加锁，会用mvcc的机制读取数据。</li></ul></li><li><p>行锁(锁定粒度小,加锁慢,容易出现死锁,并发度最高)</p><ul><li><p>记录锁存在于包括主键索引在内的唯一索引中，锁定单条索引记录。</p><ul><li><code>SELECT * FROM test WHERE id=1 FOR UPDATE;</code></li><li>必须是唯一索引,否则上述语句加的锁就会变成临键锁</li><li>同时查询语句必须为精准匹配（=），不能为 &gt;、&lt;、like等，否则也会退化成间隙锁</li></ul></li><li><p>间隙锁存在于非唯一索引中，锁定==开区间==范围内的一段间隔，它是基于临键锁实现的。</p><ul><li><code>SELECT * FROM emp WHERE empid &gt; 100 FOR UPDATE;</code></li><li>使用间隙锁锁住的是一个区间，而不仅仅是这个区间中的每一条数据。</li></ul></li><li><p>临键锁存在于非唯一索引中，并且锁定记录本身,它是一种特殊的间隙锁，锁定一段==左开右闭==的索引区间。</p><ul><li><code>UPDATE table SET name = Vladimir WHERE age = 24;</code> </li><li>临键锁只与非唯一索引列有关,它会锁住非唯一索引一段左开右闭区间的数据。</li></ul></li><li><p>插入意向锁是一种特殊的间隙锁。插入意向锁在锁定区间相同但记录行本身不冲突的情况下互不排斥。已有4,7,插入5,6,都会获取(4,7]的插入意向锁,</p><ul><li><code>INSERT INTO users SELECT 5, 'Louis', 16;</code></li></ul></li></ul></li></ul><ul><li><p>表锁(锁定粒度大,加锁快,不会出现死锁,并发度最低)</p><ul><li>表级共享锁（S）：如果用select … lock in share mode;这种方式是加的s共享锁</li><li>表级排它锁（X）：(记录锁、间隙锁、临键锁) 如果用select … for update;这种方式加的x排他锁  </li><li>意向共享锁(IS) : 表级别的锁,不需要逐行查验是否有行级锁。因为访问行级锁也是有一定开销的</li><li>意向排他(IX)锁：事务有意向对表中的某些行加排他锁</li><li>举例,一个事务如果要添加一个行锁,需要先申请意向锁,再申请行锁.另一个事务如果想添加一个表锁,不需要去逐行判断是否添加行锁,只需要判断是否兼容意向锁就可以了</li></ul></li><li><p>锁兼容:</p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20210905230236152.png" alt="image-20210905230236152"></p></li></ul><h3 id="1-2-加锁过程"><a href="#1-2-加锁过程" class="headerlink" title="1.2  加锁过程"></a>1.2  加锁过程</h3><ul><li>主键索引:<ul><li>在符合条件的记录上加上X锁</li></ul></li><li>非主键唯一索引:<ul><li>在符合条件的唯一索引的索引记录上加X锁，对应的聚簇索引的主键也加上X锁</li></ul></li><li>非唯一索引:<ul><li>Read Commit: 符合条件的索引记录上都加X锁，对应的聚簇索引的主键也加上X锁</li><li>Repeatable Read: 符合条件的索引记录上都加X锁，对应的聚簇索引的主键也加上X锁，此外二级索引符合条件的记录前后间障会加Gap锁，防止幻读现象产生。</li></ul></li></ul><h2 id="2-mysql存储结构"><a href="#2-mysql存储结构" class="headerlink" title="2. mysql存储结构"></a>2. mysql存储结构</h2><ol><li><p>全部遍历O(n)</p></li><li><p>hash:</p><p>优:增删改查O(1)</p><p>缺:范围查询排序查找搞不定O(n)</p></li><li><p>二叉树:O(log2(n))</p><p>优:深度为N的节点查找次数为O(n)</p><p>缺:如果id持续递增树不平衡O(n)</p></li><li><p>平衡二叉树(AVL):</p><p>优点：树平衡，相对二叉树IO变少</p><p>缺点： 数据量越大树高越大，树高问题导致磁盘IO过多</p></li><li><p>B树:</p><p>特点:关键字和记录是放在一起的，叶子节点不包含任何信息,</p><p>优:每个节点可以有多个子节点，可以控制树高，比平衡二叉树减少磁盘IO</p><p>缺:数据库索引是存储在磁盘上的，如果数据很大会导致索引很大，当利用引查找的时候不可能将几个G的索引全部进内存，只能逐一加载每一个磁盘页，磁盘页对应着索引树的节点innodb磁盘页大小16kb</p></li><li><p>B+树：</p><p>特点:主键索引的叶结点存储行数据。对于普通索引，其叶子节点存储的是主键值</p><p>优: B+树增加树节点索引数量，减少树高度，进而减少IO次数。B+树所有叶子节点形成有序链表，便于范围查询</p><p>​      </p></li></ol><h2 id="3-mysql索引"><a href="#3-mysql索引" class="headerlink" title="3. mysql索引"></a>3. mysql索引</h2><ol><li>口诀</li></ol><blockquote><p>全值匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上少计算，范围之后全失效；<br>LIKE百分写最右，覆盖索引不写星；<br>不等空值还有or，索引失效要少用。</p></blockquote><ul><li><h5 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'LiLei'</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">'manager'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="最佳左前缀法则-顺序可以乱-但是不能断-并且最左列前列要存在"><a href="#最佳左前缀法则-顺序可以乱-但是不能断-并且最左列前列要存在" class="headerlink" title="最佳左前缀法则,顺序可以乱,但是不能断,并且最左列前列要存在"></a>最佳左前缀法则,顺序可以乱,但是不能断,并且最左列前列要存在</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'LiLei'</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">'manager'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描"><a href="#不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描" class="headerlink" title="不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描"></a>不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'LiLei'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="存储引擎不能使用索引中范围条件或者order-by右边的列"><a href="#存储引擎不能使用索引中范围条件或者order-by右边的列" class="headerlink" title="存储引擎不能使用索引中范围条件或者order by右边的列"></a>存储引擎不能使用索引中范围条件或者order by右边的列</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'LiLei'</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">'manager'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'LiLei'</span> <span class="token operator">AND</span> age <span class="token operator">></span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">'manager'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="mysql在使用不等于（！-或者-lt-gt-）的时候无法使用索引会导致全表扫描-is-null-is-not-null-也无法使用索引"><a href="#mysql在使用不等于（！-或者-lt-gt-）的时候无法使用索引会导致全表扫描-is-null-is-not-null-也无法使用索引" class="headerlink" title="mysql在使用不等于（！=或者<>）的时候无法使用索引会导致全表扫描,is null,is not null 也无法使用索引"></a>mysql在使用不等于（！=或者&lt;&gt;）的时候无法使用索引会导致全表扫描,is null,is not null 也无法使用索引</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">!=</span> <span class="token string">'LiLei'</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h5 id="尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少select-语句"><a href="#尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少select-语句" class="headerlink" title="尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少select *语句"></a>尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少select *语句</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">'LiLei'</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">'manager'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="like以通配符开头（’-abc…’）mysql索引失效会变成全表扫描操作"><a href="#like以通配符开头（’-abc…’）mysql索引失效会变成全表扫描操作" class="headerlink" title="like以通配符开头（’%abc…’）mysql索引失效会变成全表扫描操作"></a>like以通配符开头（’%abc…’）mysql索引失效会变成全表扫描操作</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">'%Lei'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h5 id="字符串不加单引号索引失效"><a href="#字符串不加单引号索引失效" class="headerlink" title="字符串不加单引号索引失效"></a>字符串不加单引号索引失效</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'1000'</span><span class="token punctuation">;</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><h5 id="少用or-用它连接时很多情况下索引会失效-除非or的条件索引都能用上-否则会全表扫码"><a href="#少用or-用它连接时很多情况下索引会失效-除非or的条件索引都能用上-否则会全表扫码" class="headerlink" title="少用or,用它连接时很多情况下索引会失效,除非or的条件索引都能用上,否则会全表扫码"></a>少用or,用它连接时很多情况下索引会失效,除非or的条件索引都能用上,否则会全表扫码</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'LiLei'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'HanMeimei'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>in和exsits优化,x</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> fromA <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span>selectid <span class="token keyword">from</span> B<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> fromA <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">*</span><span class="token operator">*</span> fromB whereB<span class="token punctuation">.</span>id <span class="token operator">=</span> A<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>联合索引和单值索引的选择,如果查询条件包含多个字段,建立联合索引,因为多个单值索引mysql只会使用最优的一个</strong></p></li></ul><p><strong>2 分析：</strong></p><p>①MySQL支持两种方式的排序filesort和index，Using index是指MySQL扫描索引本身完成排序。index效率高，filesort效率低。</p><p>②order by满足两种情况会使用Using index。</p><p>1.order by语句使用索引最左前列。</p><p>2.使用where子句与order by子句条件列组合满足索引最左前列。</p><p>③尽量在索引列上完成排序，遵循索引建立（索引创建的顺序）时的最佳左前缀法则。</p><p>④如果order by的条件不在索引列上，就会产生Using filesort。</p><p>⑤group by与order by很类似，其实质是先排序后分组，遵照索引创建顺序的最佳左前缀法则。注意where高于having，能写在where中的限定条件就不要去having限定了。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建复合索引的顺序为c1,c2,c3,c4。</span><span class="token keyword">create</span> <span class="token keyword">index</span>  idx_test_c1234 <span class="token keyword">on</span> test<span class="token punctuation">(</span><span class="token number">c1</span><span class="token punctuation">,</span> <span class="token number">c2</span><span class="token punctuation">,</span> <span class="token number">c3</span><span class="token punctuation">,</span> <span class="token number">c4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在执行常量等值查询时，改变索引列的顺序并不会更改explain的执行结果，因为mysql底层优化器会进行优化，但是推荐按照索引顺序列编写sql语句。</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--  索引查找都用上 key_len 132</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span> <span class="token operator">and</span> <span class="token number">c3</span> <span class="token operator">=</span><span class="token string">'a3'</span> <span class="token operator">and</span> <span class="token number">c4</span> <span class="token operator">=</span><span class="token string">'a4'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--  索引查找都用上 key_len 132</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c4</span> <span class="token operator">=</span><span class="token string">'a4'</span> <span class="token operator">and</span> <span class="token number">c3</span> <span class="token operator">=</span><span class="token string">'a3'</span> <span class="token operator">and</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>范围查找或者order by排序会使复合索引右边列失效</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--  c4失效 key_len 99 Using index condition</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span><span class="token operator">and</span> <span class="token number">c3</span> <span class="token operator">></span> <span class="token string">'a3'</span> <span class="token operator">and</span> <span class="token number">c4</span> <span class="token operator">=</span> <span class="token string">'a4'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--  索引查找都用上 key_len 132 Using index condition</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span><span class="token operator">and</span> <span class="token number">c4</span> <span class="token operator">></span><span class="token string">'a4'</span> <span class="token operator">and</span> <span class="token number">c3</span> <span class="token operator">=</span><span class="token string">'a3'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--  查找只用到索引c1,c2;c3排序;c4失效 key_len 66 Using index condition</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span> <span class="token operator">and</span> <span class="token number">c4</span> <span class="token operator">=</span> <span class="token string">'a4'</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--  查找用到索引c1，c2,c3;c4排序 key_len 132</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span> <span class="token operator">and</span> <span class="token number">c3</span> <span class="token operator">=</span> <span class="token string">'a3'</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>中间索引列不能断,否则会出现Using filesort或者索引使用不充分。</p><p>ps:如果条件包含非索引列 会产生Using where 如果使用范围查询或者跳过中间列会产生Using index condition</p></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- c4失效 查找只用到索引c1，c2 key_len 66 Using index condition</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span>  <span class="token operator">and</span> <span class="token number">c4</span> <span class="token operator">=</span> <span class="token string">'a4'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- c4失效 查找只用到索引c1，c2 key_len 66 Using filesort</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查找只用到索引c1;c2和c3用于排序。key_len 33 Using where </span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c5</span> <span class="token operator">=</span><span class="token string">'a5'</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c2</span><span class="token punctuation">,</span><span class="token number">c3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>排序索引顺序不能颠倒,常量会在排序中优化,索引未颠倒，不会出现Using filesort。排序方式不同也会产生Using filesort。</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找只用到索引c1 key_len 33 Using where; Using filesort</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c5</span> <span class="token operator">=</span><span class="token string">'a5'</span>  <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">,</span><span class="token number">c2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查找用到索引c1，c2 key_len 66</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c2</span> <span class="token operator">=</span><span class="token string">'a2'</span>   <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">,</span><span class="token number">c2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 排序方式不同</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token number">c1</span> <span class="token keyword">from</span> test <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c1</span> <span class="token keyword">asc</span> <span class="token punctuation">,</span><span class="token number">c2</span> <span class="token keyword">desc</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>group by 顺序颠倒会产生Using temporary和Using filesort，极度恶劣,因为索引创建顺序相反</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找只用到索引c1 Using where; Using index; Using temporary</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c4</span> <span class="token operator">=</span><span class="token string">'a4'</span>  <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">c3</span><span class="token punctuation">,</span><span class="token number">c2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查找只用到索引c1 key_len 33 Using where; Using index</span><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> <span class="token number">c1</span> <span class="token operator">=</span><span class="token string">'a1'</span> <span class="token operator">and</span> <span class="token number">c4</span> <span class="token operator">=</span><span class="token string">'a4'</span>  <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">c2</span><span class="token punctuation">,</span><span class="token number">c3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-延迟队列"><a href="#2-延迟队列" class="headerlink" title="2 延迟队列"></a>2 延迟队列</h1><h2 id="redis实现延迟消息队列"><a href="#redis实现延迟消息队列" class="headerlink" title="redis实现延迟消息队列"></a>redis实现延迟消息队列</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们先看看以下业务场景：</p><ul><li>当订单一直处于未支付状态时，如何及时的关闭订单</li><li>如何定期检查处于退款状态的订单是否已经退款成功</li><li>在订单长时间没有收到下游系统的状态通知的时候，如何实现阶梯式的同步订单状态的策略</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>最简单的方式，定时扫表</strong>。例如对于订单支付失效要求比较高的，每2S扫表一次检查过期的订单进行主动关单操作。<strong>优点是简单</strong>，<strong>缺点是间隔扫描的时间不好控制，给短了会造成很多无意义的扫描，增大数据库压力，给长了又会使得误差较大。</strong>如果遇到表数据订单量即将过期的订单量很大，会造成关单延迟。</li><li><a href="https://blog.csdn.net/u014308482/article/details/53036770" target="_blank" rel="noopener">使用RabbitMq或者其他MQ改造实现延迟队列</a>，优点是，开源，现成的稳定的实现方案，缺点是：MQ是一个消息中间件，如果团队技术栈本来就有MQ，那还好，如果不是，那为了延迟队列而去部署一套MQ成本有点大</li><li>使用Redis键通知,开启键过期通知后，我们就可以拿到每个键值过期的事件，利用这个机制实现了给每个key开启一个定时任务的功能。优点是支持持久化,并且它能监听集群，可以建立多个redis连接，分别对每个redis的key过期进行监听。缺点是当过期的key过多,延迟会很明显</li><li>使用Redis的zset、list的特性，我们可以利用redis来实现一个延迟队列<strong>RedisDelayQueue</strong></li></ul><h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ul><li>实时性：允许存在一定时间的秒级误差</li><li>高可用性：支持单机、支持集群</li><li>支持消息删除：业务会随时删除指定消息</li><li>消息可靠性：保证至少被消费一次</li><li>消息持久化：基于Redis自身的持久化特性</li></ul><h3 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h3><p>设计主要包含以下几点：</p><ul><li>将整个Redis当做消息池，以KV形式存储消息</li><li>使用ZSET做优先队列，按照Score维持优先级</li><li>使用LIST结构，以先进先出的方式消费</li><li>以点对点的方式将消息从ZSET搬运到正确的LIST</li><li>根据TTL规则实现消息延迟,保证消息的高可靠</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>JobPool是一个hash结构，里面存储了延迟队列的信息。</li><li>DelayBucket是一个一组以时间为维度的有序队列,用来存放所有需要延迟的Job,zset结构</li><li>ReadyQueue是一个有序队列.存放到期可以消费的job,list结构</li></ul><h3 id="延迟队列的生命周期"><a href="#延迟队列的生命周期" class="headerlink" title="延迟队列的生命周期"></a>延迟队列的生命周期</h3><ul><li><p>往JobPool里put一个job。</p><p>{“delayTime”:1631020702521,”id”:1129387448361201664,”message”:”crossoverFish”,”retryCount”:0,”status”:”READY”,”topic”:”topic1”,”ttrDelayTime”:10000,”ttrTime”:10000}</p></li><li><p>同时以jobId作为value，delayTime作为score 存到bucket 中，用jodId取模，放到指定数目的bucket中，以提高效率</p><p>{“delayQueueJobId”:1129387448361201664,”delayTime”:1631020702521,”topic”:”topic1”}</p></li><li><p>DelayHandler开启多个线程,每个线程都在轮询自己需要扫描bucket，按照score排序取最小的一个，当delayTime &lt; 当前时间后，需要根据消费状态做不同的处理</p><p>超时任务:RESERVED已被消费者读取，但还未得到消费者的响应,如果超过重试次数,更改job状态为不可执行状态,删除延迟桶中的任务,return;否则将已经被消费端获取的job按照其设定的TTR，重新计算执行时间，并将其放入bucket。</p><p>延迟任务:搬运桶中的数据到队列,删除桶中数据</p></li><li><p>消费端轮询对应的topic的ready queue,获取job后,将已经获取的job按照其设定的TTR，重新计算执行时间，并将其放入bucket。消费端处理完业务后向服务端响应finish，服务端根据job id删除对应的元信息。如果消费端在ttr时间内没有响应，则ttr时间后会再收到该消息</p></li></ul><ol><li>向job池put一个元数据,状态是不可消费</li><li>以jobId作为value，delayTime作为score 存到多个bucket延迟桶 中,提高扫描速度，降低消息延迟</li><li>多线程扫描归属bucket 中的最接近当前时间的延迟数据,如果当前时间超过延迟时间,区分是超时重试任务还是延迟任务,如果是超时任务,判断是否超过最大重试次数,如果超过就删除延迟桶中的数据,同时将元数据置为搁置状态,以便问题追踪.如果没有,就跟延迟任务一样处理,将元数据置为待消费状态,搬运桶中数据到准备队列.删除延迟桶中数据</li><li>消费端消费准备队列数据,将元数据置为已消费状态,同时设定TTR,重新计算延迟时间,放入延迟桶.处理完成后,删除元数据,并且要删除延迟桶中ttr的数据,防止消息延迟重复消息的产生</li></ol><h1 id="3-业务"><a href="#3-业务" class="headerlink" title="3 业务"></a>3 业务</h1><h2 id="1-小程序-公众号-h5登录流程"><a href="#1-小程序-公众号-h5登录流程" class="headerlink" title="1 小程序/公众号/h5登录流程"></a>1 小程序/公众号/h5登录流程</h2><ul><li><p>小程序登录/绑定手机号</p><ol><li><p>获取用户个人信息.客户端调用getUserProfile 获取用户头像、昵称、性别及地区等信息</p></li><li><p>客户端调用 wx.login()接口获取登录凭证（code）</p></li><li><p>将前面获取到的登录凭证和个人信息传到服务端,服务端发送code到微信服务器换取openid（用户唯一标识）和session_key（会话密钥）和unionId,加密用户信息生成jwt token</p></li><li><p>客户端调用getphonenumber获取encryptedData（用户敏感信息加密数据） 和 iv（加密算法的初始向量 ）</p></li><li><p>将前面获取到的encryptedData、iv发送到自己的服务器，通过自己的服务器使用session_key解密获取敏感信息,比如我们的手机号</p></li></ol></li><li><p>公众号登录流程</p><ol><li>调用微信授权url获取临时CODE</li><li>携带临时code到微信换取accessToken,refreshToken和用户openId,保存授权token至redis中,如果过期,将通过refresh_token重新获取,通过access_token获取用户基本信息.这里refreshtoken的意义是accessToken失效,可以直接用refreshToken获取,同时重新保存refreshToken</li><li>携带appId和token拉取用户基本信息</li></ol></li><li><p>h5登录流程</p><ol><li>校验手机号,如果存在直接返回用户信息</li></ol></li></ul><h2 id="2-小程序-公众号-h5账号合并"><a href="#2-小程序-公众号-h5账号合并" class="headerlink" title="2 小程序/公众号/h5账号合并"></a>2 小程序/公众号/h5账号合并</h2><blockquote><p>前言: openId是公众号和小程序下用户的唯一凭证,如果想区分用户是不是同一个人,需要将公众号/小程序绑定到同一个微信开放平台（open.weixin.qq.com）帐号下，即同一个Union下,根据unionId去区分</p></blockquote><h3 id="2-1-实现方式"><a href="#2-1-实现方式" class="headerlink" title="2.1 实现方式"></a>2.1 实现方式</h3><ol><li>如果用户在h5通过手机号先注册一条账户记录.</li><li>接着在小程序登录.此时这个用户是俩条记录,因为这俩个账户暂时没法关联</li><li>接着在公众号登录,此时因为小程序账户记录了unionId,会将这个用户公众号的openId合并到小程序的记录</li><li>接着在小程序绑定手机号,和h5的手机号冲突了,因为下单,是通过手机号下单,为了保留用户全量记录,此时需要合并这条记录到h5创建的那条记录</li><li>相反,如果是先绑定的手机号码到微信账户下,通过h5登录不会再创建一条记录</li></ol><h3 id="2-2-实现难点"><a href="#2-2-实现难点" class="headerlink" title="2.2 实现难点"></a>2.2 实现难点</h3><p>一. 背景: 因为之前不区分三种登录方式,代码里耦合了大量跟openId相关的业务,如果要合并账号,肯定要区分是小程序openId还是公众号openId</p><p>二. 分析: 最无脑的方式.就是把参数放在接口参数列表中,这样改造工作量肯定很大,而且容易出错,这时候大家都会想到threadlocal,每个线程内保存全局变量,可以让不同方法直接使用，避免参数传递的麻烦。但是threadlocal是不支持跨jvm的啊,微服务这种rpc调用方式,你参数肯定传不过去的啊</p><p>三. 解决方案: 微服务,层级方法之间有什么关联呢,对,他们属于同一个调用链,我们可以用Spring Cloud中基于Sleuth的参数透传功能,利用zipkin可以对dubbo进行调用链监控</p><ol><li><p>pom添加Zipkin所需依赖：</p><pre class="line-numbers language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-sleuth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.brave<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>brave-instrumentation-dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为spring加入zipkin配置,支持kafka配置</p><pre class="line-numbers language-yml"><code class="language-yml"> sleuth:   baggage-keys: xxx   messaging:     kafka:       enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为dubbo服务提供者和消费者注入 tracing 过滤器：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 提供方的缺省值，当ProtocolConfig和ServiceConfig某属性没有配置时，采用此缺省值，可选。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>provider</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tracing<span class="token punctuation">"</span></span> <span class="token attr-name">connections</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.provider.connections}<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.provider.timeout}<span class="token punctuation">"</span></span> <span class="token attr-name">retries</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.provider.retries}<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.provider.group}<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.provider.version}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 消费方缺省配置，当ReferenceConfig某属性没有配置时，采用此缺省值，可选。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>consumer</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tracing<span class="token punctuation">"</span></span> <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.consumer.check}<span class="token punctuation">"</span></span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.consumer.group}<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dubbo.provider.version}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-活动"><a href="#3-活动" class="headerlink" title="3 活动"></a>3 活动</h2><h3 id="1-砍价活动"><a href="#1-砍价活动" class="headerlink" title="1. 砍价活动"></a><strong>1. 砍价活动</strong></h3><p>   简介: 用户发起砍价，其他用户接受砍价邀请并完成砍价操作,砍价完成以后，可前往订单页面依据砍价后的最终产品价格并进行下单支付</p><ol><li><p>团长选择商品发起砍价,创建拼团记录.</p></li><li><p>团长可以自砍一刀,砍价成功后,生成砍价好友榜,展示帮砍记录</p></li><li><p>团长生成二维码分享给团员,团员帮砍</p></li><li><p>如果达到最高砍价金额或者最高砍价次数,砍价无效</p></li><li><p>到最高可砍提示用户可以下单支付</p></li></ol><h3 id="2-拼团活动"><a href="#2-拼团活动" class="headerlink" title="2. 拼团活动"></a>2. 拼团活动</h3><p>   简介: 用户发起商品拼团，其他用户参与完成拼团,拼团完成后，用户可前往订单页面查看拼团后的最终成交价格</p><ol><li><p>团长下单拼团,创建拼团记录,支付成功后异步更新拼团状态为进行中</p></li><li><p>进入拼团详情页面生成二维码,分享团员</p></li><li><p>团员扫码下单参团,支付成功后异步更新订单状态为已成团</p></li></ol><h3 id="3-限时折扣"><a href="#3-限时折扣" class="headerlink" title="3. 限时折扣"></a>3. <strong>限时折扣</strong></h3><p>通过商品在指定时间内按活动价（三种设置方式：固定活动价、按折扣、按减价）售卖的方式，吸引并刺激用户下单购买，提高店铺浏览量及销售量。</p><h3 id="4-大转盘"><a href="#4-大转盘" class="headerlink" title="4. 大转盘"></a><strong>4. 大转盘</strong></h3><p>设置转盘抽奖活动，粉丝进入活动界面，点击开始抽奖，即有几率获得不同类型的奖品。</p><h2 id="4-花乐逗脱口秀"><a href="#4-花乐逗脱口秀" class="headerlink" title="4 花乐逗脱口秀"></a>4 花乐逗脱口秀</h2><p>花乐逗喜剧是南京的一站式脱口秀喜剧社群，包含脱口秀创作与演出、喜剧人才培养、节目制作等，致力于将脱口秀通过围绕创作、剧场演出、商业策划、脱口秀培训、艺人包装、粉丝运维、媒体宣发、综艺制作等形式打造一个完整并多元化的脱口秀生态。</p><p>移动端演出,h5/公众号/小程序登录-&gt;查询演出列表-&gt; 预约-&gt;下单 -&gt; 支付 -&gt; 核销 -&gt;退款</p><p>pc端演出,商品/电子券/演出/场次创建,用户下单记录,库存管理报表展示.</p><h2 id="5-产商品关系分析"><a href="#5-产商品关系分析" class="headerlink" title="5.产商品关系分析"></a>5.产商品关系分析</h2><h3 id="qryNavigationGoodsNew-商品导航查询"><a href="#qryNavigationGoodsNew-商品导航查询" class="headerlink" title="qryNavigationGoodsNew(商品导航查询)"></a>qryNavigationGoodsNew(商品导航查询)</h3><ol><li><p>查询能开用户产品推荐接口</p></li><li><p>查询该用户对应的目标商品（产品推荐对应的商品id集合）TF_SM_PROD_COMM_REL_NEW</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>GOODS_ID <span class="token keyword">AS</span> goodsId<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>PRODUCT_ID <span class="token keyword">AS</span> productId<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>PRODUCT_DESC <span class="token keyword">AS</span> productDesc<span class="token punctuation">,</span>  <span class="token number">b</span><span class="token punctuation">.</span>PRODUCT_GROUPBY_DESC <span class="token keyword">AS</span> productGroupbyDesc<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>PRODUCT_PRICE <span class="token keyword">AS</span> productPrice<span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>COMM_ID <span class="token keyword">as</span> commId <span class="token keyword">FROM</span> tf_sm_goodsinfo_new_sed <span class="token number">a</span><span class="token punctuation">,</span> TF_SM_GOODS_PROD_REL_NEW <span class="token number">b</span><span class="token punctuation">,</span> TF_SM_PROD_COMM_REL_NEW <span class="token number">c</span> <span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span>GOODS_ID <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>GOODS_ID <span class="token operator">AND</span> <span class="token number">c</span><span class="token punctuation">.</span>PRODUCT_ID <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>PRODUCT_ID <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>STATE <span class="token operator">=</span> <span class="token string">'01'</span> <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span>PRODUCT_STATE <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">AND</span> <span class="token number">c</span><span class="token punctuation">.</span>COMM_ID <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token string">'511207190549'</span> <span class="token punctuation">,</span> <span class="token string">'1596165023449804'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查询组合产品配置表,如果该商品的从产品或同级产品不在推荐产品中,那么该产品删除不展示</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 产商品组合配置表 用于产商品的组合的配置，如主产商品，从产商品，同级产商品，显示订单产商品等</span><span class="token comment" spellcheck="true">-- 800000101,90685157,90685161,"",01,2020-10-19 15:36:00,90685161,"",""</span><span class="token comment" spellcheck="true">-- goodId, productId</span><span class="token keyword">select</span> goodId<span class="token punctuation">,</span>productId<span class="token punctuation">,</span>followProductIds<span class="token punctuation">,</span>peerProductIds<span class="token punctuation">,</span>state<span class="token punctuation">,</span>updateTime<span class="token punctuation">,</span>hostOrderProductIds<span class="token punctuation">,</span>followOrderProductIds<span class="token punctuation">,</span>productName <span class="token keyword">FROM</span> tf_compose_goods_config <span class="token keyword">WHERE</span> state <span class="token operator">=</span> <span class="token string">'01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同一个商品下可能出现多个产品，将他们合并到同一个商品key中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//同一个商品下多个产品，则合并到同一个key中，value为productInfo下是一个产品List。</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> goodsInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20211014153650595.png" alt="image-20211014153650595"> </p></li><li><p>增加红包产品的判断  (true 为红包目标用户，false非红包目标用户),如果是红包产品,追加相关属性</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 红包配置表 用于配置某个商品红包发送时间期限，期数，图片，描述等等  hongbaoType 为 1,hongbaoXcxType 为 1</span><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">AS</span> id<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id <span class="token keyword">AS</span> goodId<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>image_name <span class="token keyword">AS</span> imageName<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>image_path <span class="token keyword">AS</span> imagePath<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>times <span class="token keyword">AS</span> times<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>start_time <span class="token keyword">AS</span> startTime<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>end_time <span class="token keyword">AS</span> endTime<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>routh_path <span class="token keyword">AS</span> routhPath<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>url <span class="token keyword">AS</span> url<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>good_desc <span class="token keyword">AS</span> goodDesc<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>state <span class="token keyword">AS</span> state<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>good_name <span class="token keyword">AS</span> goodName<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>hongbao_name <span class="token keyword">AS</span> hongbaoName<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>update_time <span class="token keyword">AS</span> updateTime<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>is_user_index <span class="token keyword">AS</span> isUserIndex <span class="token keyword">FROM</span> tf_hongbao_config <span class="token number">a</span> <span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">AND</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">a</span><span class="token punctuation">.</span>start_time <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>end_time <span class="token operator">>=</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id <span class="token operator">=</span> <span class="token string">'800000184'</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 红包目标用户白名单 判断该红包产品是否有效  true 为红包目标用户，false非红包目标用户</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> tf_hongbao_person_config<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>砍价商品逻辑判断(如果包括折扣商品,对折扣商品校验,不在有效期,不是目标用户要清除该商品)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">AS</span> id<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id <span class="token keyword">AS</span> goodId<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>image_name <span class="token keyword">AS</span> imageName<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>image_path <span class="token keyword">AS</span> imagePath<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>effective_time <span class="token keyword">AS</span> effectiveTime<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>start_time <span class="token keyword">AS</span> startTime<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>end_time <span class="token keyword">AS</span> endTime<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>routh_path <span class="token keyword">AS</span> routhPath<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>url <span class="token keyword">AS</span> url<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>good_desc <span class="token keyword">AS</span> goodDesc<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>state <span class="token keyword">AS</span> state<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>good_name <span class="token keyword">AS</span> goodName<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>discount_name <span class="token keyword">AS</span> discountName<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>update_time <span class="token keyword">AS</span> updateTime<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>is_user_index <span class="token keyword">AS</span> isUserIndex <span class="token keyword">FROM</span> tf_sm_discount_config <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>按照goodsSeq升序排序商品,分页</p></li><li><p>查詢老用戶專區本地所有产品导航配置</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> goodsId<span class="token punctuation">,</span> goodsName<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>navigationId <span class="token keyword">as</span> navigationId<span class="token punctuation">,</span> isDefault<span class="token punctuation">,</span> isAll<span class="token punctuation">,</span> isHot<span class="token punctuation">,</span> navigationName<span class="token punctuation">,</span> navigationTiTie<span class="token punctuation">,</span>isShow<span class="token punctuation">,</span> hotImage<span class="token punctuation">,</span> isMiaosha<span class="token punctuation">,</span>isXcxHot<span class="token punctuation">,</span> isXcxShow<span class="token punctuation">,</span> isHotSeq<span class="token punctuation">,</span>zxdg_state <span class="token keyword">as</span> zxdgState <span class="token keyword">FROM</span> tf_sm_olduser_goodsinfo <span class="token number">a</span><span class="token punctuation">,</span> tf_sm_navigation <span class="token number">b</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="imageCarouselAndpopularizeLink-图片轮播与推广链接接口"><a href="#imageCarouselAndpopularizeLink-图片轮播与推广链接接口" class="headerlink" title="imageCarouselAndpopularizeLink(图片轮播与推广链接接口)"></a>imageCarouselAndpopularizeLink(图片轮播与推广链接接口)</h3><ol><li>获取区间配置表符合当前时间范围的数据</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> time_area <span class="token keyword">as</span> timeArea<span class="token punctuation">,</span>date_area <span class="token keyword">as</span> dateArea<span class="token punctuation">,</span>area_state <span class="token keyword">as</span> areaState<span class="token punctuation">,</span>area_type <span class="token keyword">as</span> areaType <span class="token keyword">FROM</span> tf_sm_config_recommend_time <span class="token keyword">WHERE</span> area_state<span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">and</span> config_type <span class="token operator">=</span> <span class="token string">'91'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查询该用户对应的目标商品（产品推荐对应的商品id集合）TF_SM_PROD_COMM_REL_NEW</li><li>根据推荐商品和当前几号确定日期区间(每个区间都会对应tf_sm_recommend_home_product一条轮播图)查询可显示的banner轮播图：</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id          <span class="token keyword">as</span> goodId<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>product_id       <span class="token keyword">as</span> productId<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>channed_id       <span class="token keyword">as</span> channedId<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>banner_image     <span class="token keyword">as</span> bannerImage<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>area_type        <span class="token keyword">as</span> areaType<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>seq_num          <span class="token keyword">as</span> seqNum<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>good_name        <span class="token keyword">as</span> goodName<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>banner_type      <span class="token keyword">as</span> bannerType<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>banner_classify  <span class="token keyword">as</span> bannerClassify<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>user_tagged_type <span class="token keyword">as</span> userTaggedType<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>state            <span class="token keyword">as</span> state<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>is_xcx_show      <span class="token keyword">as</span> isXcxShow<span class="token keyword">FROM</span> tf_sm_recommend_home_product <span class="token number">a</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 产商品渠道轮播推荐图</span>     tf_sm_olduser_goodsinfo <span class="token number">b</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 商品配置表</span>     tf_sm_goodsinfo_new_sed <span class="token number">c</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 商品基础信息表</span>     tf_sm_goods_prod_rel_new <span class="token number">d</span> <span class="token comment" spellcheck="true">-- 商品产品关联表</span><span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>goodsid  <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>goodsid <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>goods_id  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>config_type <span class="token operator">=</span> <span class="token string">'91'</span> <span class="token comment" spellcheck="true">-- 配置类型 91：首页头部banner轮播图</span>  <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>goods_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>goods_id  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>banner_classify <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token comment" spellcheck="true">-- 1：目标用户</span>  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'1'</span>  <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">and</span> <span class="token number">d</span><span class="token punctuation">.</span>product_state <span class="token operator">=</span> <span class="token string">'1'</span>  <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>isshow <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">or</span> <span class="token number">b</span><span class="token punctuation">.</span>ishot <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- isshow: 1-首页展示该商品;isHot:1-火热产品</span>  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>area_type <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 日期区间标记,banner_classify必须配置为1</span>  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id <span class="token operator">in</span>       <span class="token punctuation">(</span><span class="token string">'800000110'</span><span class="token punctuation">,</span> <span class="token string">'800000111'</span><span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>seq_num<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>查询固定的轮播图,排除上面动态展示的轮播图</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id          <span class="token keyword">as</span> goodId<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>product_id       <span class="token keyword">as</span> productId<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>channed_id       <span class="token keyword">as</span> channedId<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>banner_image     <span class="token keyword">as</span> bannerImage<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>area_type        <span class="token keyword">as</span> areaType<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>seq_num          <span class="token keyword">as</span> seqNum<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>good_name        <span class="token keyword">as</span> goodName<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>banner_type      <span class="token keyword">as</span> bannerType<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>banner_classify  <span class="token keyword">as</span> bannerClassify<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>user_tagged_type <span class="token keyword">as</span> userTaggedType<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>state            <span class="token keyword">as</span> state<span class="token punctuation">,</span>                <span class="token number">a</span><span class="token punctuation">.</span>is_xcx_show      <span class="token keyword">as</span> isXcxShow<span class="token keyword">FROM</span> tf_sm_recommend_home_product <span class="token number">a</span><span class="token punctuation">,</span>     tf_sm_olduser_goodsinfo <span class="token number">b</span><span class="token punctuation">,</span>     tf_sm_goodsinfo_new_sed <span class="token number">c</span><span class="token punctuation">,</span>     tf_sm_goods_prod_rel_new <span class="token number">d</span><span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>goodsid  <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>goodsid <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>goods_id  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>config_type <span class="token operator">=</span> <span class="token string">'91'</span>  <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>goods_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>goods_id  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>banner_classify <span class="token operator">=</span> <span class="token string">'0'</span>  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'1'</span>  <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">and</span> <span class="token number">d</span><span class="token punctuation">.</span>product_state <span class="token operator">=</span> <span class="token string">'1'</span>  <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>isshow <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">or</span> <span class="token number">b</span><span class="token punctuation">.</span>ishot <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>good_id <span class="token operator">not</span> <span class="token operator">in</span>      <span class="token punctuation">(</span><span class="token string">'800000110'</span><span class="token punctuation">,</span> <span class="token string">'800000111'</span><span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>seq_num<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>6.微页面</p><ol><li><p>页面: MicroPageController</p><ul><li><p>查询页面: /microPage/queryMicroPageById</p></li><li><p>查询页面列表: /microPage/queryMicroPageList</p><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20211203171626584.png" alt="image-20211203171626584"> </p></li><li><p>修改页面: /microPage/updateMicroPage</p></li><li><p>保存页面: /microPage/saveMicroPage</p></li></ul></li><li><p>页面模板: MicroPageTemplateController</p><ul><li><p>查询页面模板详情: /microPage/queryMicroPageTemplateById</p></li><li><p>保存页面模板: microPage/saveMicroPageTemplate</p></li><li><p>查询页面模板列表: /microPage/queryMicroPageTemplateList</p></li></ul></li></ol><p><img src="E:%5Chexo%5Chexo-blog%5Csource%5Cimages%5Cimage-20211203171910766.png" alt="image-20211203171910766"> </p><h1 id="4-秒杀"><a href="#4-秒杀" class="headerlink" title="4  秒杀"></a>4  秒杀</h1><h2 id="如何设计一个秒杀系统"><a href="#如何设计一个秒杀系统" class="headerlink" title="如何设计一个秒杀系统"></a>如何设计一个秒杀系统</h2><h2 id="系统的特点"><a href="#系统的特点" class="headerlink" title="系统的特点"></a>系统的特点</h2><ul><li>高性能：秒杀涉及大量的并发读和并发写，因此支持高并发访问这点非常关键</li><li>一致性：秒杀商品减库存的实现方式同样关键，有限数量的商品在同一时刻被很多倍的请求同时来减库存，在大并发更新的过程中都要保证数据的准确性。</li><li>高可用：秒杀时会在一瞬间涌入大量的流量，为了避免系统宕机，保证高可用，需要做好流量限制</li></ul><h2 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h2><ul><li>后端优化：将请求尽量拦截在系统上游<ul><li>限流：屏蔽掉无用的流量，允许少部分流量走后端。假设现在库存为 10，有 1000 个购买请求，最终只有 10 个可以成功，99% 的请求都是无效请求</li><li>削峰：秒杀请求在时间上高度集中于某一个时间点，瞬时流量容易压垮系统，因此需要对流量进行削峰处理，缓冲瞬时流量，尽量让服务器对资源进行平缓处理</li><li>异步：将同步请求转换为异步请求，来提高并发量，本质也是削峰处理</li><li>利用缓存：创建订单时，每次都需要先查询判断库存，只有少部分成功的请求才会创建订单，因此可以将商品信息放在缓存中，减少数据库查询</li><li>负载均衡：利用 Nginx 等使用多个服务器并发处理请求，减少单个服务器压力</li></ul></li><li>前端优化：<ul><li>限流：前端答题或验证码，来分散用户的请求</li><li>禁止重复提交：限定每个用户发起一次秒杀后，需等待才可以发起另一次请求，从而减少用户的重复请求</li><li>本地标记：用户成功秒杀到商品后，将提交按钮置灰，禁止用户再次提交请求</li><li>动静分离：将前端静态数据直接缓存到离用户最近的地方，比如用户浏览器、CDN 或者服务端的缓存中</li></ul></li><li>防作弊优化：<ul><li>隐藏秒杀接口：如果秒杀地址直接暴露，在秒杀开始前可能会被恶意用户来刷接口，因此需要在没到秒杀开始时间不能获取秒杀接口，只有秒杀开始了，才返回秒杀地址 url 和验证 MD5，用户拿到这两个数据才可以进行秒杀</li><li>同一个账号多次发出请求：在前端优化的禁止重复提交可以进行优化；也可以使用 Redis 标志位，每个用户的所有请求都尝试在 Redis 中插入一个 <code>userId_secondsKill</code> 标志位，成功插入的才可以执行后续的秒杀逻辑，其他被过滤掉，执行完秒杀逻辑后，删除标志位</li><li>多个账号一次性发出多个请求：一般这种请求都来自同一个 IP 地址，可以检测 IP 的请求频率，如果过于频繁则弹出一个验证码</li><li>多个账号不同 IP 发起不同请求：这种一般都是僵尸账号，检测账号的活跃度或者等级等信息，来进行限制。比如微博抽奖，用 iphone 的年轻女性用户中奖几率更大。通过用户画像限制僵尸号无法参与秒杀或秒杀不能成功</li></ul></li></ul><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>代码整体思路参考的 <a href="https://github.com/crossoverJie" target="_blank" rel="noopener">@crossoverJie</a>，做了以下几点变动</p><ol><li>将 SSM 换成 SpringBoot，开箱即用，替换 Mapper XML 为注解，去掉 Dubbo 和 Zookeeper</li><li>原项目中依赖了开发者自己的开源包 <a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="noopener">distributed-redis-tool</a>，本项目将用到的限流部分直接集成到代码中</li><li>加入缓存预热，在秒杀开始前，将库存信息读到缓存中，并暴露数据库和缓存重置方法便于服务器部署压测</li><li>缓存更新逻辑中加入 Redis 事务，避免脏数据</li><li>将 Kafka-client 替换为 spring-kafka，自动配置，通过 KafkaTemplate 和 Listen 进行消息的生产和消费，采用 Gson 进行 Kafka 消息序列化和反序列化，精简大量代码</li></ol><h3 id="Jmeter-压测"><a href="#Jmeter-压测" class="headerlink" title="Jmeter 压测"></a>Jmeter 压测</h3><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/Jmeter%20%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%20TPS.png" alt=""></p><p><strong>测试流程如下：</strong></p><p>首先下载 JMeter 安装包  可以去官网下载：<a href="http://jmeter.apache.org" target="_blank" rel="noopener">http://jmeter.apache.org</a></p><p>windows 环境下载 zip 安装包，然后将下载的文件进行解压，进入 bin 目录运行 jmeter.bat 即可。</p><p>接下来是 Jmeter 测试计划设置:</p><p>（1）在测试计划上右键新建一个线程组</p><p><img src="https://github.com/daydreamdev/MeetingFilm/raw/master/pic/seconds-kill/1.png" alt=""></p><p>线程组属性内可以修改线程数、Ramp-Up 时间和循环次数。</p><p><img src="https://github.com/daydreamdev/MeetingFilm/raw/master/pic/seconds-kill/2.png" alt=""></p><p>（2）在线程组上右键添加 HTTP 请求</p><p><img src="https://github.com/daydreamdev/MeetingFilm/raw/master/pic/seconds-kill/3.png" alt=""></p><p>其属性包括 WEB 服务器的协议、服务器名称或 IP 和端口号，HTTP 请求的方法和路径。</p><p><img src="https://github.com/daydreamdev/MeetingFilm/raw/master/pic/seconds-kill/4.png" alt=""></p><p>（3）在HTTP请求上右键添加一个监听器，可以根据自己的需求添加汇总报告、查看结果树等等。</p><p><img src="https://github.com/daydreamdev/MeetingFilm/raw/master/pic/seconds-kill/5.png" alt=""></p><p>如下图所示为汇总报告，可以查看异常比例和吞吐量，方便调优。</p><p><img src="https://github.com/daydreamdev/MeetingFilm/raw/master/pic/seconds-kill/6.png" alt=""></p><p>这样一个简单的 Jmeter 测试计划就算添加完了。一个 HTTP 请求对应一个接口，可以添加多个 HTTP 请求 以达到多个接口同时检测的需求。</p><h3 id="0-基本秒杀逻辑"><a href="#0-基本秒杀逻辑" class="headerlink" title="0. 基本秒杀逻辑"></a>0. 基本秒杀逻辑</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">createWrongOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据库校验库存</span>    Stock stock <span class="token operator">=</span> <span class="token function">checkStock</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 扣库存(无锁)</span>    <span class="token function">saleStock</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成订单</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Stock <span class="token function">checkStock</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Stock stock <span class="token operator">=</span> stockService<span class="token punctuation">.</span><span class="token function">getStockById</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"库存不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stock<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">saleStock</span><span class="token punctuation">(</span>Stock stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stock<span class="token punctuation">.</span><span class="token function">setSale</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> stockService<span class="token punctuation">.</span><span class="token function">updateStockById</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>Stock stock<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    StockOrder order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StockOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order<span class="token punctuation">.</span><span class="token function">setSid</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"创建订单失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 扣库存 Mapper 文件</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE stock SET count = #{count, jdbcType = INTEGER}, name = #{name, jdbcType =                  VARCHAR}, "</span> <span class="token operator">+</span> <span class="token string">"sale = #{sale,jdbcType = INTEGER},version = #{version,jdbcType = INTEGER} "</span> <span class="token operator">+</span> <span class="token string">"WHERE id = #{id, jdbcType = INTEGER}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-乐观锁更新库存，解决超卖问题"><a href="#1-乐观锁更新库存，解决超卖问题" class="headerlink" title="1. 乐观锁更新库存，解决超卖问题"></a>1. 乐观锁更新库存，解决超卖问题</h3><p>超卖问题出现的场景</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E7%A7%92%E6%9D%80%E8%B6%85%E5%8D%96.png" alt=""></p><p>悲观锁虽然可以解决超卖问题，但是加锁的时间可能会很长，会长时间的限制其他用户的访问，导致很多请求等待锁，卡死在这里，如果这种请求很多就会耗尽连接，系统出现异常。乐观锁默认不加锁，更失败就直接返回抢购失败，可以承受较高并发</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%B9%90%E8%A7%82%E9%94%81%E6%89%A3%E5%BA%93%E5%AD%98.png" alt=""></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">createOptimisticOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 校验库存</span>    Stock stock <span class="token operator">=</span> <span class="token function">checkStock</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 乐观锁更新</span>    <span class="token function">saleStockOptimstic</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建订单</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 乐观锁 Mapper 文件</span><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE stock SET count = count - 1, sale = sale + 1, version = version + 1 WHERE "</span> <span class="token operator">+</span>        <span class="token string">"id = #{id, jdbcType = INTEGER} AND version = #{version, jdbcType = INTEGER}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Redis-计数限流"><a href="#2-Redis-计数限流" class="headerlink" title="2. Redis 计数限流"></a>2. Redis 计数限流</h3><p>根据前面的优化分析，假设现在有 10 个商品，有 1000 个并发秒杀请求，最终只有 10 个订单会成功创建，也就是说有 990 的请求是无效的，这些无效的请求也会给数据库带来压力，因此可以在在请求落到数据库之前就将无效的请求过滤掉，将并发控制在一个可控的范围，这样落到数据库的压力就小很多</p><p>关于限流的方法，可以看这篇博客<a href="https://gongfukangee.github.io/2019/04/04/Limit/" target="_blank" rel="noopener">浅析限流算法</a>，由于计数限流实现起来比较简单，因此采用计数限流，限流的实现可以直接使用 Guava 的 RateLimit 方法，但是由于后续需要将实例通过 Nginx 实现负载均衡，这里选用 Redis 实现分布式限流</p><p>在 <code>RedisPool</code> 中对 <code>Jedis</code> 线程池进行了简单的封装，封装了初始化和关闭方法，同时在 <code>RedisPoolUtil</code> 中对 Jedis 常用 API 进行简单封装，每个方法调用完毕则关闭 Jedis 连接。</p><p>限流要保证写入 Redis 操作的原子性，因此利用 Redis 的单线程机制，通过 LUA 脚本来完成。</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E7%A7%92%E6%9D%80%E9%99%90%E6%B5%81.png" alt=""></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLimit</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FAIL_CODE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Integer limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Redis 限流     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取 jedis 实例</span>            jedis <span class="token operator">=</span> RedisPool<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析 Lua 文件</span>            String script <span class="token operator">=</span> ScriptUtil<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"limit.lua"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 请求限流</span>            String key <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 计数限流</span>            result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>FAIL_CODE <span class="token operator">!=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"成功获取令牌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            RedisPool<span class="token punctuation">.</span><span class="token function">jedisPoolClose</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在 Controller 中，每个请求到来先取令牌，获取到令牌再执行后续操作，获取不到直接返回 ERROR</span><span class="token keyword">public</span> String <span class="token function">createOptimisticLimitOrder</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> <span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RedisLimit<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOptimisticOrder</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Exception: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> success <span class="token operator">:</span> error<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Redis-缓存商品库存信息"><a href="#3-Redis-缓存商品库存信息" class="headerlink" title="3. Redis 缓存商品库存信息"></a>3. Redis 缓存商品库存信息</h3><p>虽然限流能够过滤掉一些无效的请求，但是还是会有很多请求落在数据库上，通过 <code>Druid</code> 监控可以看出，实时查询库存的语句被大量调用，对于每个没有被过滤掉的请求，都会去数据库查询库存来判断库存是否充足，对于这个查询可以放在缓存 Redis 中，Redis 的数据是存放在内存中的，速度快很多。</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/Redis%20%E7%BC%93%E5%AD%98%E5%BA%93%E5%AD%98%E4%BF%A1%E6%81%AF.png" alt=""></p><h4 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h4><p>在秒杀开始前，需要将秒杀商品信息提前缓存到 Redis 中，这么秒杀开始时则直接从 Redis 中读取，也就是缓存预热，Springboot 中开发者通过 <code>implement ApplicationRunner</code> 来设定 SpringBoot 启动后立即执行的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisPreheatRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StockService stockService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从数据库中查询热卖商品，商品 id 为 1</span>        Stock stock <span class="token operator">=</span> stockService<span class="token punctuation">.</span><span class="token function">getStockById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除旧缓存</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_COUNT <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_SALE <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_VERSION <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//缓存预热</span>        <span class="token keyword">int</span> sid <span class="token operator">=</span> stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_COUNT <span class="token operator">+</span> sid<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_SALE <span class="token operator">+</span> sid<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_VERSION <span class="token operator">+</span> sid<span class="token punctuation">,</span>             String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缓存和数据一致性"><a href="#缓存和数据一致性" class="headerlink" title="缓存和数据一致性"></a>缓存和数据一致性</h4><p>缓存和 DB 的一致性是一个讨论很多的问题，推荐看参考中的 <a href="https://juejin.im/post/5af5b2c36fb9a07ac65318bd#heading-11" target="_blank" rel="noopener">使用缓存的正确姿势</a>，首先看下先更新数据库，再更新缓存策略，假设 A、B 两个线程，A 成功更新数据，在要更新缓存时，A 的时间片用完了，B 更新了数据库接着更新了缓存，这是 CPU 再分配给 A，则 A 又更新了缓存，这种情况下缓存中就是脏数据，具体逻辑如下图所示：</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%85%88%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%8D%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98.png" alt=""></p><p>那么，如果避免这个问题呢？就是缓存不做更新，仅做删除，先更新数据库再删除缓存。对于上面的问题，A 更新了数据库，还没来得及删除缓存，B 又更新了数据库，接着删除了缓存，然后 A 删除了缓存，这样只有下次缓存未命中时，才会从数据库中重建缓存，避免了脏数据。但是，也会有极端情况出现脏数据，A 做查询操作，没有命中缓存，从数据库中查询，但是还没来得及更新缓存，B 就更新了数据库，接着删除了缓存，然后 A 又重建了缓存，这时 A 中的就是脏数据，如下图所示。但是这种极端情况需要数据库的写操作前进入数据库，又晚于写操作删除缓存来更新缓存，发生的概率极其小，不过为了避免这种情况，可以为缓存设置过期时间。</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%85%88%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%8D%E5%88%A0%E9%99%A4%E7%BC%93%E5%AD%98.png" alt=""></p><p>安装先更新数据库再删除缓存的策略来执行，代码如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">createOrderWithLimitAndRedis</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 校验库存，从 Redis 中获取</span>    Stock stock <span class="token operator">=</span> <span class="token function">checkStockWithRedis</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 乐观锁更新库存和Redis</span>    <span class="token function">saleStockOptimsticWithRedis</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建订单</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Redis 校验库存</span><span class="token keyword">private</span> Stock <span class="token function">checkStockWithRedisWithDel</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Integer count <span class="token operator">=</span> null<span class="token punctuation">;</span>    Integer sale <span class="token operator">=</span> null<span class="token punctuation">;</span>    Integer version <span class="token operator">=</span> null<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> data <span class="token operator">=</span> RedisPoolUtil<span class="token punctuation">.</span><span class="token function">listGet</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK <span class="token operator">+</span> sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Redis 不存在，先从数据库中获取，再放到 Redis 中</span>        Stock newStock <span class="token operator">=</span> stockService<span class="token punctuation">.</span><span class="token function">getStockById</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">listPut</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK <span class="token operator">+</span> newStock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>newStock<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>newStock<span class="token punctuation">.</span><span class="token function">getSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>newStock<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> newStock<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sale <span class="token operator">=</span> newStock<span class="token punctuation">.</span><span class="token function">getSale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        version <span class="token operator">=</span> newStock<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sale <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        version <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"库存不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"库存不足 Redis currentCount: "</span> <span class="token operator">+</span> sale<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Stock stock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setSale</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处应该是热更新，但是在数据库中只有一个商品，所以直接赋值</span>    stock<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> stock<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saleStockOptimsticWithRedisWithDel</span><span class="token punctuation">(</span>Stock stock<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 乐观锁更新数据库</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> stockService<span class="token punctuation">.</span><span class="token function">updateStockByOptimistic</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除缓存，应该使用 Redis 事务</span>    RedisPoolUtil<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"删除缓存成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"并发更新库存失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Jmeter 压力测试中，并发效果并不好，跟前面的限流并发差不多，观察 Redis 中的数据看出，由于每次都删除缓存，因此导致多次缓存都不能命中，能命中缓存的次数很少，因此这种方案并不可取。</p><p>考虑到使用乐观锁更新数据库，因此在使用先更新数据库再更新缓存的策略中，实际情况如下所示</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%85%88%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%8D%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98V2.png" alt=""></p><p>在 A 未更新缓存阶段，虽然 B 从缓存中获取到的库存信息脏数据，但是，乐观锁使得 B 在更新数据库时失败，这时 A 又更新了缓存，则保证了数据的最终一致性，并且由于缓存一直都可以命中，对并发量的提升也是很显著的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">createOrderWithLimitAndRedis</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 校验库存，从 Redis 中获取</span>    Stock stock <span class="token operator">=</span> <span class="token function">checkStockWithRedis</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 乐观锁更新库存和Redis</span>    <span class="token function">saleStockOptimsticWithRedis</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建订单</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Redis 中校验库存</span><span class="token keyword">private</span> Stock <span class="token function">checkStockWithRedis</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Integer count <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>RedisPoolUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_COUNT <span class="token operator">+</span> sid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer sale <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>RedisPoolUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_SALE <span class="token operator">+</span> sid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer version <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>RedisPoolUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_VERSION <span class="token operator">+</span> sid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"库存不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"库存不足 Redis currentCount: "</span> <span class="token operator">+</span> sale<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Stock stock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setSale</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">;</span>    stock<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处应该是热更新，但是在数据库中只有一个商品，所以直接赋值</span>    stock<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> stock<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更新 DB 和 Redis</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saleStockOptimsticWithRedis</span><span class="token punctuation">(</span>Stock stock<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> stockService<span class="token punctuation">.</span><span class="token function">updateStockByOptimistic</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"并发更新库存失败"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新 Redis</span>    StockWithRedis<span class="token punctuation">.</span><span class="token function">updateStockWithRedis</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Redis 多个写入操作的事务</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateStockWithRedis</span><span class="token punctuation">(</span>Stock stock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> RedisPool<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始事务</span>        Transaction transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事务操作</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_COUNT <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_SALE <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisPoolUtil<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span>RedisKeysConstant<span class="token punctuation">.</span>STOCK_VERSION <span class="token operator">+</span> stock<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束事务</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"updateStock 获取 Jedis 实例失败："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        RedisPool<span class="token punctuation">.</span><span class="token function">jedisPoolClose</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发现热点数据"><a href="#发现热点数据" class="headerlink" title="发现热点数据"></a>发现热点数据</h4><p>热点数据就是用户的热点请求对应的数据，分成静态热点数据和动态热点数据。</p><p>静态热点数据就是能够提前预测的数据，比如约定商品 A、B、C 参与秒杀，则可以提前对商品进行标记处理。动态热点数据就是不能被提前预测的，比如在商家在抖音上投放广告，导致商品短时间内被大量购买，临时产生热点数据。对于动态热点数据，最主要的就是能够提前预测和发现，以便于及时处理，这里给出<a href="https://time.geekbang.org/column/intro/127" target="_blank" rel="noopener">极客时间：许令波 - 如何设计一个秒杀系统</a>中对于热点数据发现系统的实现：</p><ol><li>构建一个异步的系统，它可以收集交易链路上各个环节中的中间件产品的热点 Key</li><li>建立一个热点上报和可以按照需求订阅的热点服务的下发规范，主要目的是通过交易链路上各个系统（包括详情、购物车、交易、优惠、库存、物流等）访问的时间差，把上游已经发现的热点透传给下游系统，提前做好保护。</li><li>将上游系统收集的热点数据发送到热点服务台，然后下游系统（如交易系统）就会知道哪些商品会被频繁调用，然后做热点保护。</li></ol><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E7%A7%92%E6%9D%80%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE.png" alt=""></p><p>我们通过部署在每台机器上的 Agent 把日志汇总到聚合和分析集群中，然后把符合一定规则的热点数据，通过订阅分发系统再推送到相应的系统中。你可以是把热点数据填充到 Cache 中，或者直接推送到应用服务器的内存中，还可以对这些数据进行拦截，总之下游系统可以订阅这些数据，然后根据自己的需求决定如何处理这些数据。</p><p>对于热点数据，除了上文所提到的缓存，还要进行隔离和限制，比如把热点商品限制在一个请求队列里，防止因某些热点商品占用太多的服务器资源，而使其他请求始终得不到服务器的处理资源；将这种热点数据隔离出来，不要让 1% 的请求影响到另外的 99%</p><h3 id="4-Kafka-异步"><a href="#4-Kafka-异步" class="headerlink" title="4. Kafka 异步"></a>4. Kafka 异步</h3><p>服务器的资源是恒定的，你用或者不用它的处理能力都是一样的，所以出现峰值的话，很容易导致忙到处理不过来，闲的时候却又没有什么要处理，因此可以通过削峰来延缓用户请求的发出，让服务端处理变得更加平稳。</p><p>项目中采用的是用消息队列 Kafka 来缓冲瞬时流量，将同步的直接调用转成异步的间接推送，中间通过一个队列在一端承接瞬时的流量洪峰，在另一端平滑地将消息推送出去。</p><p><img src="https://github.com/gongfukangEE/gongfukangEE.github.io/raw/master/_pic/%E5%88%86%E5%B8%83%E5%BC%8F/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%BC%93%E5%86%B2.png" alt=""></p><p>关于 Kafka 的学习，推荐<a href="https://juejin.im/user/5baf7ec26fb9a05cff32266e" target="_blank" rel="noopener">朱小厮的博客</a>和博主的书《深入理解 Kafka：核心设计与实践原理》，向 Kafka 发送消息和从 Kafka 拉取消息需要对消息进行序列化处理，这里采用的是<code>Gson</code>框架</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 向 Kafka 发送消息</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrderWithLimitAndRedisAndKafka</span><span class="token punctuation">(</span><span class="token keyword">int</span> sid<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 校验库存</span>    Stock stock <span class="token operator">=</span> <span class="token function">checkStockWithRedis</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 下单请求发送至 kafka，需要序列化 stock</span>    kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>kafkaTopic<span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息发送至 Kafka 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 监听器从 Kafka 拉取消息</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerListen</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">"SECONDS-KILL-TOPIC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kafkaMessage <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Object -> String</span>        String message <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> kafkaMessage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反序列化</span>        Stock stock <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> message<span class="token punctuation">,</span> Stock<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建订单</span>        orderService<span class="token punctuation">.</span><span class="token function">consumerTopicToCreateOrderWithKafka</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Kafka 消费消息执行创建订单业务</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">consumerTopicToCreateOrderWithKafka</span><span class="token punctuation">(</span>Stock stock<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 乐观锁更新库存和 Redis</span>    <span class="token function">saleStockOptimsticWithRedis</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Kafka 消费 Topic 创建订单成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Kafka 消费 Topic 创建订单失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Nginx-负载均衡"><a href="#5-Nginx-负载均衡" class="headerlink" title="5. Nginx 负载均衡"></a>5. Nginx 负载均衡</h3><p>单台服务器的处理性能是有瓶颈的，当并发量十分大时，无论怎么优化都满足不了需求，这时候就需要增加一台服务器分担原有服务器的访问压力，通过负载均衡服务器 Nginx 可以将来自用户的访问请求发到应用服务器集群中的任何一台机器</p><p>Nginx 配置如下：</p><p>在项目的配置文件 application.properties 中分别设置两个应用的端口号如 8888 和 9999 。</p><pre><code>server.port=8888server.port=9999</code></pre><p>然后进入nginx/conf文件目录将nginx.conf配置文件中的http部分修改为如下代码：</p><pre><code>http {    include       mime.types;    default_type  application/octet-stream;    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '    #                  '$status $body_bytes_sent "$http_referer" '    #                  '"$http_user_agent" "$http_x_forwarded_for"';    #access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    upstream server_miaosha{        server 127.0.0.1:8888 weight=1;        server 127.0.0.1:9999 weight=1;    }    server {        listen  80;        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / {            #root html;            #index index.html index.htm;            set $xheader $remote_addr;            if ( $http_x_forwarded_for != '' ){                set $xheader $http_x_forwarded_for;            }            proxy_set_header X-Real-IP $xheader;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_set_header Host $http_host;            proxy_redirect off;            proxy_http_version 1.1;            proxy_set_header Connection "";            proxy_pass http://server_miaosha;        }        #error_page  404     /404.html;</code></pre><p>权重weight可以根据个人需求进行设置，本文均设置为 1 ，表示访问 IP + 80 端口时两个应用按 1:1 进行轮询。</p><h2 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h2><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `stock` (    `id` int(11) unsigned NOT NULL AUTO_INCREMENT,    `name` varchar(50) NOT NULL DEFAULT '' COMMENT '名称',    `count` int(11) NOT NULL COMMENT '库存',    `sale` int(11) NOT NULL COMMENT '已售',    `version` int(11) NOT NULL COMMENT '乐观锁，版本号',    PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;CREATE TABLE `stock_order` (    `id` int(11) unsigned NOT NULL AUTO_INCREMENT,    `sid` int(11) NOT NULL COMMENT '库存ID',    `name` varchar(30) NOT NULL DEFAULT '' COMMENT '商品名称',    `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',    PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ul><li><a href="https://time.geekbang.org/column/intro/127" target="_blank" rel="noopener">极客时间：许令波 - 如何设计一个秒杀系统</a></li><li><a href="https://crossoverjie.top/2018/05/07/ssm/SSM18-seconds-kill/" target="_blank" rel="noopener">crossoverjie：SSM(十八)秒杀架构实践</a></li><li><a href="https://www.cnblogs.com/xiangkejin/p/9351501.html" target="_blank" rel="noopener">秒杀系统优化方案（下）吐血整理</a></li><li><a href="http://www.codeceo.com/article/spike-system-artch.html" target="_blank" rel="noopener">电商网站秒杀与抢购的系统架构</a></li><li><a href="https://juejin.im/post/5af5b2c36fb9a07ac65318bd#heading-11" target="_blank" rel="noopener">使用缓存的正确姿势</a></li><li><a href="https://zhuanlan.zhihu.com/p/32780164" target="_blank" rel="noopener">SpringBoot Kafka 整合使用</a></li></ul></blockquote><h1 id="5-Redis"><a href="#5-Redis" class="headerlink" title="5 Redis"></a>5 Redis</h1><h2 id="1-redis事务"><a href="#1-redis事务" class="headerlink" title="1 redis事务"></a>1 redis事务</h2><p><strong>为什么Redis不支持事务回滚？</strong></p><p>多数事务失败是由语法错误或者数据结构类型错误导致的，语法错误说明在命令入队前就进行检测的，而类型错误是在执行时检测的，Redis为提升性能而采用这种简单的事务，这是不同于关系型数据库的，特别要注意区分。</p><p><strong>Redis执行事务过程?</strong></p><p>在事务开始前用WATCH监控k1，之后修改k1为11，说明事务开始前k1值被改变，MULTI开始事务，修改k1值为12，k2为22，执行EXEC，发回nil，说明事务回滚；查看下k1、k2的值都没有被事务中的命令所改变。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">set</span> k1 v1OK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">set</span> k2 v2OK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> WATCH k1OK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">set</span> k1 <span class="token number">11</span>OK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> MULTIOK<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">set</span> k1 <span class="token number">12</span>QUEUED<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">set</span> k2 <span class="token number">22</span>QUEUED<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> <span class="token keyword">EXEC</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> get k1<span class="token string">"11"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span> get k2<span class="token string">"v2"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>:<span class="token number">6379</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-并发编程"><a href="#6-并发编程" class="headerlink" title="6 并发编程"></a>6 并发编程</h1><h2 id="1-线程池"><a href="#1-线程池" class="headerlink" title="1 线程池"></a>1 线程池</h2><h3 id="1-1-JDK中的线程池主要解决两个问题："><a href="#1-1-JDK中的线程池主要解决两个问题：" class="headerlink" title="1.1 JDK中的线程池主要解决两个问题："></a>1.1 JDK中的线程池主要解决两个问题：</h3><ul><li><p>线程的创建和销毁是需要开销的。而使用线程池，线程池里面的线程是可复用的，不会每次执行异步任务时候都重新创建和销毁线程。</p></li><li><p>线程池提供了一种资源限制和管理的手段，比如可以限制线程的个数，动态新增线程等</p></li></ul><h3 id="1-2-为什么不允许使用excutors创建线程"><a href="#1-2-为什么不允许使用excutors创建线程" class="headerlink" title="1.2 为什么不允许使用excutors创建线程"></a>1.2 为什么不允许使用excutors创建线程</h3><p>避免使用Executors创建线程池，主要是避免使用其中的默认实现，可以调用ThreadPoolExecutor的构造函数来自己创建线程池。在创建的同时，给指定容量就可以了。fixed和single会堆积大量线程,cache和scheduled可能会创建大量线程。导致oom</p><h3 id="1-3-线程池参数配置"><a href="#1-3-线程池参数配置" class="headerlink" title="1.3 线程池参数配置"></a>1.3 线程池参数配置</h3><ul><li><p>corePoolSize: 线程池核心线程大小</p></li><li><p>maximumPoolSize: 线程池最大线程数量</p></li><li><p>keepAliveTime: 空闲线程存活时间</p></li><li><p>QueueCapacity: 队列大小</p></li><li><p>handler  拒绝策略</p><ul><li>AbortPolicy 丢弃任务，抛运行时异常</li><li>CallerRunsPolicy 执行任务</li><li>DiscardPolicy 忽视，什么都不会发生</li><li>DiscardOldestPolicy 从队列中踢出最先进入队列的任务，再把这个新任务添加进去</li></ul></li></ul><p>流程: 一个任务被提交到线程池以后，首先会找有没有空闲存活线程，如果有则直接将任务交给这个空闲线程来执行，如果没有则会缓存到工作队列中，如果工作队列满了，才会创建一个新线程，然后从工作队列的头部取出一个任务交由新线程来处理，而将刚提交的任务放入工作队列尾部。线程池不会无限制的去创建新线程，它会有一个最大线程数量的限制，这个数量即由maximunPoolSize指定。</p><h3 id="1-4-亲缘性线程池"><a href="#1-4-亲缘性线程池" class="headerlink" title="1.4 亲缘性线程池"></a>1.4 亲缘性线程池</h3><p>亲缘性线程池在需要保证顺序消费，并且需要高吞吐量的情况下很有用,把相同key的任务按照投递线程池的顺序，放到同一个内存队列</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> KeyAffinityExecutor executor <span class="token operator">=</span> KeyAffinityExecutor<span class="token punctuation">.</span><span class="token function">newSerializingExecutor</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"MY-POOL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeByAffinitydPool</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span> personList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> executor<span class="token punctuation">.</span><span class="token function">executeEx</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-easyexcel"><a href="#7-easyexcel" class="headerlink" title="7.easyexcel"></a>7.easyexcel</h1><p>符合开闭原则,因为很多实体类是通过工具连接数据库自动生成的,如果表字段变更,代码会自动覆盖,之前添加的业务注解就得重新补上去,创建excel对应的实体对象,指定写入的列</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">downloadByVo</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String fileName<span class="token punctuation">,</span>                                Class <span class="token class-name">cls</span><span class="token punctuation">,</span> List dataList<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> includeColumnFiledNames<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> excludeColumnFiledNames<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileName <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\+"</span><span class="token punctuation">,</span> <span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename*=utf-8''"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LongestMatchColumnWidthStyleStrategy longestMatchColumnWidthStyleStrategy <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">LongestMatchColumnWidthStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cls<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"sheet1"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">registerConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongStringConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span>longestMatchColumnWidthStyleStrategy<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">includeColumnFiledNames</span><span class="token punctuation">(</span>includeColumnFiledNames<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excludeColumnFiledNames</span><span class="token punctuation">(</span>excludeColumnFiledNames<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-用户校验"><a href="#8-用户校验" class="headerlink" title="8.用户校验"></a>8.用户校验</h1><ol><li>session认证</li></ol><p><img src="https://img-blog.csdnimg.cn/20210118084421237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vbmtleUJyb3RoZXJz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><blockquote><p><strong>原理</strong>:在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器并告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了</p></blockquote><p>缺点:</p><ul><li><p>第一对服务器的压力大：因为每个用户经过服务器认证之后，服务器都要做一次记录，通常这些记录都是保存在内存中，而随着认证用户的增多，服务器开销会明显增大。</p></li><li><p>第二程序扩展性变差：用户认证后，服务器做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须在这台服务器上才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力，也就意味着限制了扩展的能力。</p></li><li><p>第三安全性偏低：因为是基于cookie来进行用户识别的，cookie如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。</p></li></ul><ol start="2"><li><p>token认证</p><p><img src="https://img-blog.csdnimg.cn/20210118084436601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vbmtleUJyb3RoZXJz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><blockquote><p>原理: 简单的token就是使用一个唯一的字符串用来标识是哪个用户，然后把这个字符串token存在Redis中，每次请求的时候拦截，判断Redis中是否有这个token，并做一些处理。</p></blockquote></li><li><p>jwt token</p><p><img src="https://img-blog.csdnimg.cn/20210118084527794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vbmtleUJyb3RoZXJz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">  </p></li></ol><blockquote><p>  原理:JWT去中心化,只需要保存在客户端.不依赖 Cookie，使得其可以防止 CSRF 攻击，也能在禁用 Cookie 的浏览器环境中正常运行.由三部分组成</p><p> Header：头部分通常有两部分组成，一个是使用到的签名算法（”HS256”是JWT官方比较推荐的签名算法）一个是令牌的类型（这里目前就一种类型JWT）</p><p> Payload：负载用来存放信息，大致理解为存放的是我们需要传递的内容信息</p><p> Signature：创建签名,用编码后的header和payload以及秘钥，按照公式进行加密之后得到的数据就是我们需要的JWT</p></blockquote><ul><li><p>问题1:Base64Url编码方式不是加密手段,使用公开的解码方式将JWT的原文解析出来,所以不要在JWT中携带敏感信息,但是在特定业务场景下，如果JWT中含有某些关键信息，就可以节省后台很多额外操作，例如数据库查询、服务接口访问等。进而缩短后台响应时间，改善用户体验。</p><p>方案:因为JWT是由服务端创建，客户端转手后又发回服务端使用。所以加密和解密都发生在服务端，不涉及到密钥的分发,采用加解密运算速度快的对称加密算法AES作为敏感信息的加密方式。</p></li><li><p>问题2:JWT Token 一旦签发，就会在有效期内一直可用，无法在服务端废止，当用户进行登出操作，只能依赖客户端删除掉本地存储的 JWT Token，如果需要禁用用户，单纯使用 JWT 就无法做到了</p><p>方案:使用 Refresh Token ,由于Refresh Token 不会在客户端请求业务接口时验证，只有在申请新的 Access Token 时才会验证，所以将 Refresh Token 存储在数据库中，不会对业务接口的响应时间造成影响，也不需要像 Session 一样一直保持在内存中以应对大量的请求。</p><p>token过期后通常要重新登录,这样用户体验会非常不好,理论上可以通过token续时,当token过期时间超过一半时,会生成一个新的token,覆盖到请求头,但是如果需要禁用用户,就无法做到了,这时候refresh-token的作用就体现了, 如果 Refresh Token禁用了，用户就只能重新登录了。</p><p><img src="https://img2020.cnblogs.com/blog/1312420/202004/1312420-20200403194016462-80583762.png" alt="img"> </p></li></ul><h1 id="9-问题"><a href="#9-问题" class="headerlink" title="9.问题"></a>9.问题</h1><p>1.dubbo异常处理</p><ul><li><p>异常简介:异常分为受校验异常,和未校验异常,对于运行期异常,我们不需要显示的捕获或者抛出,jvm会自动帮我们处理,对于受校验的异常,我们必须捕获或者向上抛出</p></li><li><p>异常处理方式:对于服务层异常,直接向上层抛出,web层统一处理,如果是非自定义异常,提示未知错误,后台打印异常日志</p></li><li><p>背景:在dubbo中,即使你抛出了自定义异常,web层统一捕获时,你会发现自己自定义的异常类被转成了Runtime异常</p></li><li><p>原因:dubbo为了保证序列化正常,对于自定义异常,需要保证异常类和接口类在同一个jar包类,否则会包装成<code>RuntimeException</code></p></li><li><p>解决方法:</p><ul><li>异常类和接口类在同一个jar包,但是这种不方便统一维护管理</li><li>在接口方法签名上显式声明抛出<code>BaseException</code>，这种方式相对简单一些，比较好统一维护</li><li>为了兜底处理,防止开发人员未显示声明自定义异常,通过aop拦截异常方法,获取方法上面的异常class类,如果抛出异常类在其中,我们就主动包装成<code>runtimeException</code>,异常信息处理成自定义异常的json加一个前缀便于web层统一捕获区分<code>runtimeEception</code>异常按需处理</li></ul></li></ul><p>2.maven依赖冲突</p><ul><li><p>冲突原因:依赖冲突是指项目依赖的某一个jar包，有多个不同的版本，因而造成类包版本冲突</p></li><li><p>解决方法:查看产生依赖冲突的类jar，找出我们不想要的依赖类jar，手工将其排除在外就可以了。具体执行步骤如下</p><ul><li><p>通过dependency:tree是命令来检查版本冲突或者可以安装maven helper插件来检查依赖冲突</p><p><code>mvn -Dverbose dependency:tree</code></p></li><li><p>使用第一声明者优先原则,谁先定义的就用谁的传递依赖</p></li><li><p>使用路径近者优先原则</p></li><li><p>排除依赖</p></li><li><p>冲突版本锁定</p></li></ul></li></ul><h1 id="10-Shardsphere分表"><a href="#10-Shardsphere分表" class="headerlink" title="10.Shardsphere分表"></a>10.Shardsphere分表</h1><p>简介:Sharding-Sphere是一套开源的分布式数据库中间件,是Apache的顶级项目,支持数据分片、读写分离，同时兼容多种数据库，通过可插拔架构，理想情况下，可以做到对业务代码无感知。</p><p>背景:系统上线后发现埋点表和接口日志表2天的数据量就已经300万的数据了,单表数据量太大且持续增长,查询操作非常耗时.决定使用分表中间件：ShardingSphere。</p><p>分片策略:</p><ul><li><p>标准分片策略</p><blockquote><p>它只支持对单个分片健（字段）为依据的分库分表，并提供了两种分片算法 <code>PreciseShardingAlgorithm</code>（精准分片）和 <code>RangeShardingAlgorithm</code>（范围分片）。</p></blockquote></li><li><p>复合分片策略</p><blockquote><p>复合分片策略支持对多个分片健操作。</p></blockquote></li><li><p>行表达式分片策略</p><blockquote><p>行表达式分片策略（<code>InlineShardingStrategy</code>），在配置中使用 <code>Groovy</code> 表达式，提供对 SQL语句中的 <code>=</code> 和 <code>IN</code> 的分片操作支持，它只支持单分片健。</p></blockquote></li><li><p>Hint分片策略</p><blockquote><p>这种分片策略无需配置分片健，分片健值也不再从 SQL中解析，而是由外部指定分片信息，让 SQL在指定的分库、分表中执行。</p></blockquote></li></ul><p>需求: </p><p>1.分表需要支持按周期分表,且可配置,不同的表分割周期不一样</p><p>2.分表需要支持动态建表,业务数据持续扩增,无法准确预估分表数量</p><p>3.分表需要支持修改表结构,之前的表结构可能设计的不合理</p><p>4.分表需要支持多数据源,之前做数据同步添加了多种数据源</p><p>解决:</p><p>1.根据分片列时间和分片周期计算实际建表名称</p><p>2.项目初始化查询分表库所有表名并存储到redis中,新增表中数据时,查询数据库是否包含期望表名,如果有,直接返回,如果不存在,需要建新表</p><p>3.新增一张配置表,存放新的分表表结构,替换掉原来表名,新建期望表</p><p>4.如果我一部分表做了分库分表，另一部分未做分库分表的表怎么处理？怎么才能正常访问？</p><ul><li>严格划分功能库，分片的库与不分片的库剥离开，业务代码中按需切换数据源访问</li><li>设置一个为默认数据源，如果不配置分片规则,shardsphere在找不到规则时一律访问默认库。</li><li>将不参与分表的数据源独立于shardsphere之外,在应用中分别处理分片和不分片的情况.<ul><li>使用baomidou多数据源的组件,思路是将sharding jdbc数据源，加入到多数据源中。集成后，使用<code>@DS</code>注解就可以切换数据源，非常方便。</li><li>sharding jdbc虽然是Apache的顶级项目，但也不是对有所SQL兼容，使用多数据源 + sharding jdbc则能跳过很多sharding jdbc的不足。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务</title>
      <link href="/2021/09/05/bi-ji/mysql-shi-wu/"/>
      <url>/2021/09/05/bi-ji/mysql-shi-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="测试幻读"><a href="#测试幻读" class="headerlink" title="测试幻读"></a>测试幻读</h2><p>幻读在rr隔离级别下,因为mvcc机制,解决了读数据情况下的幻读问题 ,而对于修改的操作依旧存在幻读问题</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 事务隔离级别rr,关闭自动提交</span><span class="token comment" spellcheck="true">-- T1 第一步</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- T2 第二步</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tyu<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> createTime<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'tyu'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- T1 第三步</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tyu<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> createTime<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'tyu'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- T1 第四步</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时对于事务T1来说,就发生了幻读,插入前后明明读取不到id = 2的记录,但是插入失败</p><ol><li>聚簇索引<br>查询命中:RC、RR都是对聚簇索引加X锁。<br>查询未命中:RC不加锁，RR在索引之前和之后的范围里加GAP锁。</li><li>二级唯一索引<br>查询命中:RC、RR会对二级和聚簇索引都加X锁（防止其他事务通过聚簇改数据）。<br>查询未命中:RC不加锁，RR只在二级索引加GAP。</li><li>二级非唯一索引<br>查询命中:RC对二级和聚簇加X锁，RR对二级加nextlock锁对聚簇加X锁。<br>查询未命中:RC不加锁，RR只在二级索引加GAP。</li></ol><h2 id="1-宏观"><a href="#1-宏观" class="headerlink" title="1 宏观"></a>1 宏观</h2><h3 id="1-1-数据库锁"><a href="#1-1-数据库锁" class="headerlink" title="1.1 数据库锁"></a>1.1 数据库锁</h3><ul><li>数据库锁适用于集群</li><li>粒度小，更方便控制</li></ul><h3 id="1-2-代码锁"><a href="#1-2-代码锁" class="headerlink" title="1.2 代码锁"></a>1.2 代码锁</h3><ul><li><p>需要复杂的处理，才能作用于集群</p></li><li><p>粒度大</p></li></ul><h2 id="2-微观"><a href="#2-微观" class="headerlink" title="2 微观"></a>2 微观</h2><h3 id="2-1-行锁-amp-表锁"><a href="#2-1-行锁-amp-表锁" class="headerlink" title="2.1 行锁 &amp; 表锁"></a>2.1 行锁 &amp; 表锁</h3><h4 id="2-1-1-说明"><a href="#2-1-1-说明" class="headerlink" title="2.1.1 说明"></a>2.1.1 说明</h4><p><strong>只有「明确」指定主键，才会执行锁，否则将会执行表锁</strong></p><h4 id="2-1-2-示例"><a href="#2-1-2-示例" class="headerlink" title="2.1.2 示例"></a>2.1.2 示例</h4><p>假设有个表 products ，字段id、name、type，id是主键。</p><ul><li><p>无锁</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 明确指定主键，但不存在该主键的值(没有数据，当然不会有锁)SELECT * FROM products WHERE id=-1 FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>行锁</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 明确指定主键SELECT * FROM products WHERE id=3 FOR UPDATE;SELECT * FROM products WHERE id=3 AND type=1 FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>表锁</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 主键不明确SELECT * FROM products WHERE name='Mouse' FOR UPDATE;SELECT * FROM products WHERE id<>'3' FOR UPDATE;SELECT * FROM products WHERE id LIKE '3' FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-1-3-注意"><a href="#2-1-3-注意" class="headerlink" title="2.1.3 注意"></a>2.1.3 注意</h4><ul><li>要测试锁定的状况，可以利用 MySQL 的 Command Mode ，开二个视窗来做测试。</li><li>MyAsim 只支持表级锁，InnerDB支持行级锁添加了（行级锁、表级锁）锁的数据不能被其它事务再锁定，也不被其它事务修改（修改、删除） 。是表级锁时，不管是否查询到记录，都会锁定表。</li></ul><h3 id="2-2-行锁算法"><a href="#2-2-行锁算法" class="headerlink" title="2.2 行锁算法"></a>2.2 行锁算法</h3><h4 id="2-2-1-Record-Lock（普通行锁）"><a href="#2-2-1-Record-Lock（普通行锁）" class="headerlink" title="2.2.1 Record Lock（普通行锁）"></a>2.2.1 Record Lock（普通行锁）</h4><ul><li>对于键值在条件范围内，且存在的记录，使用” Record Lock “，即普通的行锁机制；</li></ul><h4 id="2-2-2-Gap-Lock（间隙锁）"><a href="#2-2-2-Gap-Lock（间隙锁）" class="headerlink" title="2.2.2 Gap Lock（间隙锁）"></a>2.2.2 Gap Lock（间隙锁）</h4><ul><li>对于键值在条件范围内但并不存在的记录，叫做” 间隙（GAP) “，InnoDB会对这个“间隙”加锁，这种锁机制就是所谓的” Gap Lock “(间隙锁)；</li></ul><h4 id="2-2-3-Next-Key-Lock（行-amp-间隙）"><a href="#2-2-3-Next-Key-Lock（行-amp-间隙）" class="headerlink" title="2.2.3 Next-Key Lock（行 &amp; 间隙）"></a>2.2.3 Next-Key Lock（行 &amp; 间隙）</h4><ul><li><p>对于存在于不存在的数据同时加锁，则称为” Next-Key Lock “；</p></li><li><p><strong>Next-Key Lock包含Record Lock和Gap Lock；</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 假如user表中只有101条记录，empid的值是1,2,...,100,101</span><span class="token comment" spellcheck="true"># 范围条件的检索，会对值为101的记录加锁，也会对大于101（不存在）加锁</span><span class="token comment" spellcheck="true"># 由于两个锁同时存在，则此处为 Next-Key Lock</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  <span class="token keyword">user</span> <span class="token keyword">where</span> user_id <span class="token operator">></span> <span class="token number">100</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-3-表锁算法"><a href="#2-3-表锁算法" class="headerlink" title="2.3 表锁算法"></a>2.3 表锁算法</h3><h4 id="2-3-1-意向锁"><a href="#2-3-1-意向锁" class="headerlink" title="2.3.1 意向锁"></a>2.3.1 意向锁</h4><ul><li><p>当一个事务带着表锁去访问一个被加了行锁的资源，那么，此时，这个行锁就会升级为意向锁，将表锁住。</p></li><li><p>常用的意向锁有：意向共享锁，意向排它锁，共享意向排它锁</p></li></ul><h4 id="2-3-2-自增锁"><a href="#2-3-2-自增锁" class="headerlink" title="2.3.2 自增锁"></a>2.3.2 自增锁</h4><ul><li><p>事务插入自增类型的列时获取自增锁</p><blockquote><p>如果一个事务正在往表中插入自增记录，所有其他事务的插入必须等待</p></blockquote></li></ul><h2 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h2><h3 id="3-1-共享锁-amp-排它锁"><a href="#3-1-共享锁-amp-排它锁" class="headerlink" title="3.1 共享锁 &amp; 排它锁"></a>3.1 共享锁 &amp; 排它锁</h3><blockquote><p>行锁和表锁是锁粒度的概念，共享锁和排它锁是他们的具体实现</p></blockquote><h4 id="3-1-1-共享锁（S）：读锁"><a href="#3-1-1-共享锁（S）：读锁" class="headerlink" title="3.1.1 共享锁（S）：读锁"></a>3.1.1 共享锁（S）：读锁</h4><ul><li>允许一个事务去读一行，阻止其他事务获取该行的排它锁。</li><li>多事务时，只能加共享读锁，不能加排他写锁；单事务时，可以加任何锁。</li><li>一般理解为：能读，不能写。</li></ul><h4 id="3-1-2-排它锁（X）：写锁"><a href="#3-1-2-排它锁（X）：写锁" class="headerlink" title="3.1.2 排它锁（X）：写锁"></a>3.1.2 排它锁（X）：写锁</h4><ul><li>允许持有排它锁的事务读写数据，阻止其他事物获取该数据的共享锁和排它锁。</li><li>其他事务不能获取该数据的任何锁，直到排它锁持有者释放。</li><li>不能获取任何锁，不代表不能无锁读取。</li></ul><p><strong><font color="red">注意</font></strong></p><ul><li><p>排它锁指的是，在某个事务获取数据的排它锁后，其他事务不能获取该数据的任何锁，<br><strong>并不代表其他事务不能无锁读取该数据。</strong></p><ul><li><font color="red">无锁</font><ul><li><strong>select … from</strong></li></ul></li><li><font color="red">共享锁</font><ul><li><strong>select … lock in share mode</strong></li></ul></li><li><font color="red">排它锁</font><ul><li><strong>update</strong></li><li><strong>delete</strong></li><li><strong>insert</strong></li><li><strong>select … for update</strong></li></ul></li></ul></li><li><p>MySQL8.0 中，使用 FOR SHARE 替代了 LOCK IN SHARE MODE，但仍然支持 LOCK IN SHARE MODE；<br>虽然是等价的，但是 FOR SHARE 支持 NOWAIT 、 SKIP LOCKED 等，配合自旋，可以实现高效的等待队列。</p></li></ul><h3 id="3-2-乐观锁-amp-悲观锁"><a href="#3-2-乐观锁-amp-悲观锁" class="headerlink" title="3.2 乐观锁 &amp; 悲观锁"></a>3.2 乐观锁 &amp; 悲观锁</h3><blockquote><p>不管是什么锁都需要增加，需加失败重试</p></blockquote><h4 id="3-2-1-乐观锁"><a href="#3-2-1-乐观锁" class="headerlink" title="3.2.1 乐观锁"></a>3.2.1 乐观锁</h4><ul><li><p>通过版本号来进行更新的操作属于乐观锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> tab <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> version <span class="token operator">=</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-2-2-悲观锁"><a href="#3-2-2-悲观锁" class="headerlink" title="3.2.2 悲观锁"></a>3.2.2 悲观锁</h4><blockquote><p>共享锁 &amp; 排它锁都是悲观锁的具象实现</p></blockquote><ul><li>显示地控制行或表锁属于悲观锁</li></ul><h2 id="4-原理"><a href="#4-原理" class="headerlink" title="4  原理"></a>4  原理</h2><p>牵扯到索引巴拉巴拉…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用策略模式优化条件判断</title>
      <link href="/2021/08/23/li-yong-ce-lue-mo-shi-you-hua-tiao-jian-pan-duan/"/>
      <url>/2021/08/23/li-yong-ce-lue-mo-shi-you-hua-tiao-jian-pan-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>利用策略模式优化过多 if else 代码<br>当业务场景比较复杂,如果if..else过多逻辑会很混乱,后期维护也比较头大,写着写着就会漏掉一些东西<br>我们的业务场景有各种各样的活动组件,每个活动用户参与后可能会给用户发送一些短信或者微信模板消息,但是数据封装,目标客群可能不太一样,我们要是想统一处理.肯定会有很多if..else区分场景</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>通知类型,这边用map去封装</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> NotifyEnum <span class="token punctuation">{</span> <span class="token function">CUTPRICE_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"cutPrice"</span><span class="token punctuation">,</span><span class="token string">"砍价成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"cutPriceSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SECKILL_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"secKill"</span><span class="token punctuation">,</span><span class="token string">"秒杀成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"secKillSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GROUP_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span><span class="token string">"拼团成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"groupSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>NotifyEnum<span class="token operator">></span> notifyMap <span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token punctuation">{</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>NotifyEnum<span class="token operator">></span> tempMap  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cutPrice"</span><span class="token punctuation">,</span>CUTPRICE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"secKill"</span><span class="token punctuation">,</span>SECKILL_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span>GROUP_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     notifyMap <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>tempMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/** 枚举值码 */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String commandType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** 枚举描述 */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String desc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 实现类  */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String clazz <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 得到枚举值码。  * @return 枚举值码。  */</span> <span class="token keyword">public</span> String <span class="token function">getCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> commandType<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 得到枚举描述。  * @return 枚举描述。  */</span> <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> desc<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 获取 class。  * @return class。  */</span> <span class="token keyword">public</span> String <span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> clazz<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 构建一个 。  * @param commandType 枚举值码。  * @param desc 枚举描述。  */</span>  <span class="token function">NotifyEnum</span><span class="token punctuation">(</span>String commandType<span class="token punctuation">,</span> String desc<span class="token punctuation">,</span> String clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>commandType <span class="token operator">=</span> commandType<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> NotifyEnum <span class="token function">buildFromNotifyType</span><span class="token punctuation">(</span>String notifyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>notifyType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> notifyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>notifyType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个异步通知接口,这里面定义了一些抽象方法，交给具体的业务实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**  * 发送异步消息前置处理  * @param param  * @return  */</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知真正实现接口  * @param param 入参  */</span> <span class="token keyword">void</span> <span class="token function">dealNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是异步通知接口的抽象类.因为数据装载已经在各个实现类准备好了,所以发送消息这部分业务,就可以抽出来公用了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractNotifyService</span> <span class="token keyword">implements</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>AbstractNotifyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知前置参数处理方法  * @param param  * @return  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知真正实现接口  * @param param 入参  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dealNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"真正开始进行异步通知处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//装载数据</span>     Object message <span class="token operator">=</span> <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//处理message</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是异步通知接口的其中一个实现,在里面我们可以具体beforeSendNotice这个方法；这些实现类都会注册到 Spring Bean 容器中供之后使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CutPriceSuccessNotifyServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNotifyService</span> <span class="token keyword">implements</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CutPriceSuccessNotifyServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知前置参数处理方法  * 主要目的是准备要发送的参数以及要给哪些人发送  * @param param  * @return  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始进行处理砍价成功异步通知 前置处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> null<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是一个异步通知工厂类,根据通知类型,获取通知api</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyServiceFactory</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> INotifyService<span class="token operator">></span> notifyServiceMap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 获取通知对象  * @param notifyEnum  * @return  */</span> <span class="token keyword">public</span> INotifyService <span class="token function">getNotifyService</span><span class="token punctuation">(</span>NotifyEnum notifyEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>     INotifyService notifyService <span class="token operator">=</span> notifyServiceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>notifyEnum<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> notifyService<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试一下是否返回正确的通知api</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"异步通知"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"获取异步通知"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getNotifyService/{commandType}"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getNotifyService</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"commandType"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>String commandType<span class="token punctuation">)</span><span class="token punctuation">{</span>     INotifyService notifyService <span class="token operator">=</span> notifyServiceFactory<span class="token punctuation">.</span><span class="token function">getNotifyService</span><span class="token punctuation">(</span>NotifyEnum<span class="token punctuation">.</span><span class="token function">buildFromNotifyType</span><span class="token punctuation">(</span>commandType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>notifyService<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了让类的职责更加单一、代码更加清晰。这里运用了工厂模式，虽然代码量增加了，但是后期维护拓展会很方便，比较符合开闭原则。当然还有种思路，在枚举里维护api class和类型的关系。根据class对象获取容器对象</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>过滤器和拦截器的区别</title>
      <link href="/2021/08/23/guo-lu-qi-he-lan-jie-qi-de-qu-bie/"/>
      <url>/2021/08/23/guo-lu-qi-he-lan-jie-qi-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>过滤器和拦截器的区别:</p><ol><li>过滤器 是基于函数回调的，拦截器 则是基于Java的反射机制（动态代理）实现的</li><li>过滤器 依赖Tomcat等容器,而拦截器(Interceptor) 它是一个Spring组件，并由Spring容器管理,是可以单独使用,获取IOC容器中的各个bean</li><li>过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。拦截器 Interceptor 是在请求进入servlet后，在进入Controller之前进行预处理的，Controller 中渲染了对应的视图之后请求结束。</li><li>过滤器几乎可以对所有进入容器的请求起作用，而拦截器只会对Controller中请求或访问static目录下的资源请求起作用。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>session和nosession系统</title>
      <link href="/2021/08/20/session-he-nosession-xi-tong/"/>
      <url>/2021/08/20/session-he-nosession-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="Sessio系统"><a href="#Sessio系统" class="headerlink" title="Sessio系统"></a>Sessio系统</h2><p>验证流程:</p><ul><li>当客户端A第一次发送请求后，nginx将这个请求分发给服务器1 </li><li>然后将服务器1 产生的Session 放入Redis中，此时客户端A、服务器1 和Redis中都会有一个相同的Session</li><li>当客户端A发送第二次请求的时候，nginx将请求分发给服务器2 （已知服务器2 中无Session）</li><li>因为客户端自己携带了一个Session，那么服务器2 就可以拿着客户端带来的Session中的ID去Redis中找到Session，找到这个Session后，就能正常执行之后的操作。</li></ul><p>认证缺点:</p><ul><li><p>对服务器的压力大：因为每个用户经过服务器认证之后，服务器都要做一次记录，通常这些记录都是保存在内存中，而随着认证用户的增多，服务器开销会明显增大。</p></li><li><p>程序扩展性变差：用户认证后，服务器做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须在这台服务器上才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力，也就意味着限制了扩展的能力。</p></li><li><p>安全性偏低：因为是基于cookie来进行用户识别的，cookie如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。</p></li></ul><h2 id="no-session系统"><a href="#no-session系统" class="headerlink" title="no session系统"></a>no session系统</h2><p>Token 验证流程：<br>当接收方接收到一个JWT的时候，首先要对这个JWT的完整性进行验证，这个就是签名认证。它验证的方法其实很简单，只要把header做base64url解码，就能知道JWT用的什么算法做的签名，然后用这个算法，再次用同样的逻辑对header和payload做一次签名，并比较这个签名是否与JWT本身包含的第三个部分的串是否完全相同，只要不同，就可以认为这个JWT是一个被篡改过的串，自然就属于验证失败了。接收方生成签名的时候必须使用跟JWT发送方相同的密钥，意味着要做好密钥的安全传递或共享</p><p>token+redis： 是自己生成个32位的key，value为用户和token信息，访问时解析token拿到用户标识,判断redis里是否有该用户信息.如果有，比对用户token，验证成功加载该用户信息完成登录。服务需要存储下发的每个用户对应的token及身份信息，维持其过期时间，好处是随时可以删除某个token，阻断该token继续使用.缺点：每次都要进行redis查询。占用redis存储空间。</p><p>JWT 验证流程：</p><ul><li>在头部信息中声明加密算法和常量， 然后把header使用json转化为字符串</li><li>在载荷中声明用户信息，同时还有一些其他的内容；再次使用json 把载荷部分进行转化，转化为字符串</li><li>使用在header中声明的加密算法和每个项目随机生成的secret来进行加密， 把第一步分字符串和第二部分的字符串进行加密， 生成新的字符串。字符串是独一无二的。</li><li>解密的时候，只要客户端带着JWT来发起请求，服务端就直接使用secret进行解密。</li></ul><p>JWT: 生成并发给客户端之后，后台是不用存储，客户端访问时会验证其签名、过期时间等再取出里面的信息（如username），再使用该信息直接查询用户信息完成登录验证。jwt自带签名、过期等校验，后台不用存储，缺陷是一旦下发，服务后台无法拒绝携带该jwt的请求（如踢除用户）；</p><p>token和jwt的区别:<br>服务端验证客户端发来的token信息要进行数据的查询操作；JWT验证客户端发来的token信息就不用， 在服务端使用密钥校验就可以，不用数据库的查询。</p><p>access_token和refresh_token双令牌无感知登录:<br>access_token<br>由后端颁发给前台,一般采用对称加密算法,可以反向解析出参数信息,如:用户ID,失效时间等<br>refresh_token<br>它的作用就是避免让用户重复输入账号密码登录再次验证<br>使用<br>一般我们可以将access_token的过期时间设置为2小时的，refresh_token的过期时间设置为1个月，然后用户第一次进来，用了一段时间access_token过期了，过期后前端携带refresh_token去获取新的access_token，返回的新的access_token依旧是2小时，那么除此之外，refresh_token自身再刷新一次，刷新一次后他还是1个月的过期时间(不累加)，这就保证了用户在一个月内只要访问了应用，就可以享受无感知的体验.<br>为什么不直接把accesstoken设长一店<br>access_token 泄露概率比较大,毕竟每次api请求都附带它,如果单独把 access_token 过期时间设置过长,一旦泄露,就相当于密码泄露<br>refresh_token 泄露概率比较小,只有每次access_token 失效时才会使用它,所以二者组合可以很好的避免token泄露带来的安全风险,同时又能保证用户体验</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springSecurity源码学习</title>
      <link href="/2021/08/18/springsecurity/"/>
      <url>/2021/08/18/springsecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用springboot+springSecurity+jwt实现基于token的权限管理</p><h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><ol><li><p>UsernamePasswordAuthenticationFilter过滤器获取用户登录的信息,调用authenticationManager.authenticate()进行身份验证</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Authentication <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                             HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 从输入流中获取到登录的信息</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         LoginUser loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LoginUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rememberMe<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getRememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> loginUser<span class="token punctuation">.</span><span class="token function">getRememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>                 <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ProviderManager是authenticationManager的一个默认实现,委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证,调用retrieveUser方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.onlySupports"</span><span class="token punctuation">,</span> <span class="token string">"Only UsernamePasswordAuthenticationToken is supported"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String username <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"NONE_PROVIDED"</span> <span class="token operator">:</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> cacheWasUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     UserDetails user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">getUserFromCache</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"User '"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hideUserNotFoundExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">throw</span> var6<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"retrieveUser returned null - a violation of the interface contract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> var7<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>postAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">putUserInCache</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     Object principalToReturn <span class="token operator">=</span> user<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>forcePrincipalAsString<span class="token punctuation">)</span> <span class="token punctuation">{</span>         principalToReturn <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createSuccessAuthentication</span><span class="token punctuation">(</span>principalToReturn<span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证身份就是加载响应的UserDetails，看看是否和用户输入的账号、密码、权限等信息匹配。此步骤由实现AuthenticationProvider的DaoAuthenticationProvider（它利用UserDetailsService验证用户名、密码和授权）处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> UserDetails <span class="token function">retrieveUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareTimingAttackProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         UserDetails loadedUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>loadedUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"UserDetailsService returned null, which is an interface contract violation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> loadedUser<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mitigateAgainstTimingAttack</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> var4<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> var5<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>这一步就是将获取到的userDetails根据用户名作密码比对<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>UserDetails userDetails<span class="token punctuation">,</span> UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication failed: no credentials provided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      String presentedPassword <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>presentedPassword<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication failed: password does not match stored value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><p>总结:</p><ul><li>class extends UsernamePasswordAuthenticationFilter,这个过滤器会拦截表单登录提交的action,它会委托认证管理器authenticationManager来验证登录</li><li>class implements UserDetailsService,重写loadUserByUsername(),查库获取用户信息</li><li>class implements AuthenticationProvider, 真正验证登录的类,authenticate()中验证登录凭证</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> spring-security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easyexcel</title>
      <link href="/2021/08/18/bi-ji/easyexcel/"/>
      <url>/2021/08/18/bi-ji/easyexcel/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的<code>耗内存</code>，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到几M，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>工具类 TestFileUtil</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFileUtil</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> InputStream <span class="token function">getResourcesFileInputStream</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> TestFileUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> File <span class="token function">createNewFile</span><span class="token punctuation">(</span>String pathName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> file<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> File <span class="token function">readFile</span><span class="token punctuation">(</span>String pathName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> File <span class="token function">readUserHomeFile</span><span class="token punctuation">(</span>String pathName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>读</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 最简单的读   * &lt;p>   * 1. 创建excel对应的实体对象 参照{@link DemoData}   * &lt;p>   * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照{@link DemoDataListener}   * &lt;p>   * 3. 直接读即可   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span>      <span class="token comment" spellcheck="true">// 写法1：</span>      String fileName <span class="token operator">=</span> TestFileUtil<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"demo"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"demo.xlsx"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span>      EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> DemoData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 写法2：</span>      fileName <span class="token operator">=</span> TestFileUtil<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"demo"</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"demo.xlsx"</span><span class="token punctuation">;</span>      ExcelReader excelReader <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          excelReader <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> DemoData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DemoDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ReadSheet readSheet <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">readSheet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          excelReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readSheet<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>excelReader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span>              excelReader<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>写</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 最简单的写   * &lt;p>   * 1. 创建excel对应的实体对象 参照{@link DemoData}   * &lt;p>   * 2. 直接写即可   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 写法1</span>      String fileName <span class="token operator">=</span> TestFileUtil<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"simpleWrite"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span>      <span class="token comment" spellcheck="true">// 如果这里想使用03 则 传入excelType参数即可</span>      EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> DemoData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"模板"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 写法2</span>      fileName <span class="token operator">=</span> TestFileUtil<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"simpleWrite"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里 需要指定写用哪个class去写</span>      ExcelWriter excelWriter <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          excelWriter <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> DemoData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          WriteSheet writeSheet <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">writerSheet</span><span class="token punctuation">(</span><span class="token string">"模板"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          excelWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> writeSheet<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 千万别忘记finish 会帮忙关闭流</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>excelWriter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              excelWriter<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件上传</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 文件上传   * &lt;p>   * 1. 创建excel对应的实体对象 参照{@link UploadData}   * &lt;p>   * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照{@link UploadDataListener}   * &lt;p>   * 3. 直接读即可   */</span>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UploadData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UploadDataListener</span><span class="token punctuation">(</span>uploadDAO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>DownloadData<span class="token operator">></span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>DownloadData<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>DownloadData<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          DownloadData data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          data<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">"字符串"</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          data<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          data<span class="token punctuation">.</span><span class="token function">setDoubleData</span><span class="token punctuation">(</span><span class="token number">0.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件下载</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 文件下载并且失败的时候返回json（默认失败了会返回一个有部分数据的Excel）   *   * @since 2.1.1   */</span>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"downloadFailedUsingJson"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloadFailedUsingJson</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span>          String fileName <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"测试"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\+"</span><span class="token punctuation">,</span> <span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename*=utf-8''"</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 这里需要设置不关闭流</span>          EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DownloadData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">autoCloseStream</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"模板"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 重置response</span>          response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"下载文件失败"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyexcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超简单的session共享</title>
      <link href="/2021/08/17/chao-jian-dan-de-session-gong-xiang/"/>
      <url>/2021/08/17/chao-jian-dan-de-session-gong-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于传统的单体服务,不存在session共享问题,但是在微服务架构下,session共享最简单的方式就是通过redis去实现,从redis中存取数据工作量还是比较大的,spring session使用spring的代理过滤器,将所有session拦截下来.自动同步到redis中</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>创建一个springboot工程,引入Web,Spring Session,Redis,pom文件如下</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Idea中启动多个端口进行访问<br><img src="/images/Idea%E5%A4%9A%E7%AB%AF%E5%8F%A3%E5%90%AF%E5%8A%A8.png" alt="这边我设置的是9091,9092俩个端口模拟集群"></p></li><li><p>nginx配置</p><pre class="line-numbers language-conf"><code class="language-conf"># 简单说明下上游服务器tyu.com负载到9091和9092这俩个端口,weight 表示服务的权重upstream tyu.com {     #ip_hash;     server 127.0.0.1:9091 weight=1;     server 127.0.0.1:9092 weight=2; }location / {         proxy_pass   http://tyu.com/;         proxy_redirect default;     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemoController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span> Integer port<span class="token punctuation">;</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/set"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">setSession</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>     session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"tyu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">getSession</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/n1.png" alt="往session塞值"><br><img src="/images/n2.png" alt="去get session的值"><br><img src="/images/n3.png" alt="去get session的值"><br>往92塞值,可以发现91,92这俩个端口都能get到值</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SSM 架构中使用 Spring Session ,要配置三个地方 ，一个是 web.xml 配置代理过滤器，然后在 Spring 容器中配置 Redis，最后再配置 Spring Session，步骤还是有些繁琐的，而 Spring Boot 中直接帮我们省去了这些繁琐的步骤！不用再去配置 Spring Session。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> spring session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活动业务分析</title>
      <link href="/2021/08/17/bi-ji/he-xin-huo-dong-ye-wu-fen-xi/"/>
      <url>/2021/08/17/bi-ji/he-xin-huo-dong-ye-wu-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="砍价活动"><a href="#砍价活动" class="headerlink" title="砍价活动"></a>砍价活动</h2><p>用户发起砍价，其他用户接受砍价邀请并完成砍价操作,砍价完成以后，可前往订单页面依据砍价后的最终产品价格并进行下单支付</p><ol><li>团长选择商品发起砍价,创建拼团记录.</li><li>团长可以自砍一刀,砍价成功后,生成砍价好友榜,展示帮砍记录</li><li>团长生成二维码分享给团员,团员帮砍</li><li>如果达到最高砍价金额或者最高砍价次数,砍价无效</li><li>达到最高可砍提示用户可以下单支付<h2 id="拼团活动"><a href="#拼团活动" class="headerlink" title="拼团活动"></a>拼团活动</h2>用户发起商品拼团，其他用户参与完成拼团,拼团完成后，用户可前往订单页面查看拼团后的最终成交价格</li><li>团长下单拼团,创建拼团记录,支付成功后异步更新拼团状态为进行中</li><li>进入拼团详情页面生成二维码,分享团员</li><li>团员扫码下单参团,支付成功后异步更新订单状态为已成团<h2 id="限时折扣"><a href="#限时折扣" class="headerlink" title="限时折扣"></a>限时折扣</h2>通过商品在指定时间内按活动价（三种设置方式：固定活动价、按折扣、按减价）售卖的方式，吸引并刺激用户下单购买，提高店铺浏览量及销售量。<h2 id="大转盘"><a href="#大转盘" class="headerlink" title="大转盘"></a>大转盘</h2>设置转盘抽奖活动，粉丝进入活动界面，点击开始抽奖，即有几率获得不同类型的奖品。</li></ol><h2 id="账号更新"><a href="#账号更新" class="headerlink" title="账号更新"></a>账号更新</h2><ul><li>h5 账户表有登录手机号的记录,查询账户信息;没有手机号,新增一条记录</li><li>小程序 有登录openId的记录,更新记录.没有openId,新增记录,如果h5登录产生的记录与当前手机号一致,合并当前手机号记录到h5记录,当前openid记录置为无效 </li><li>公众号 有登录openId的记录,更新记录,没有openId,新增记录</li></ul><h2 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h2><ul><li>小程序</li></ul><ol><li>客户端调用 wx.login()接口获取登录凭证（code）</li><li>getUserProfile 可获取用户头像、昵称、性别及地区信息，开发者每次通过该接口获取用户个人信息均需用户确认”、encryptedData（用户敏感信息加密数据） 和 iv（加密算法的初始向量 ）</li><li>将前面获取到的 code 、encryptedData、iv发送到自己的服务器，通过自己的服务器解密获取信息</li><li>自己的服务器发送code到微信服务器获取openid（用户唯一标识）和session_key（会话密钥），最后将encryptedData、iv、session_key通过AES解密获取到用户敏感数据</li><li>将用户敏感数据生成 jwt token,如果请求的是活动的接口,就解析解析jwt token,获取userId,redis获取userId对应的密钥,解析token,保存用户信息到session</li></ol><ul><li>h5 </li></ul><ol><li>登录校验,session中如果不存在登录用户信息,</li><li>跳转到登录页面,输入手机号验证码登录验证</li><li>验证成功后将用户信息塞到session中</li></ol><ul><li>微信 </li></ul><ol><li><p>调用微信授权url获取临时CODE,重定向至获取用户信息的接口</p></li><li><p>根据临时code认证获取ACCESS_TOKEN和用户openId,保存用户授权access_token至redis中,如果过期,将通过refresh_token重新获取,通过access_token获取用户基本信息</p></li><li><p>保存或者更新用户信息,重定向到自动登录的接口</p></li><li><p>将用户信息塞到session中,如果需要绑定手机号,重定向到登陆页面,绑定手机号登录</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**  * 微信网页授权URL地址  * 获取临时CODE  */</span> <span class="token keyword">private</span> String webAuthUrl <span class="token operator">=</span> <span class="token string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 网页授权的完整URL为 ==> https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx547e0ea14ea62cd7&amp;redirect_uri=https%3A%2F%2Ft.hualedou.cn%2Fmarket-gateweb%2FweChat%2FgetOpenId&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=111036513#wechat_redirect</span> <span class="token comment" spellcheck="true">/**  * 网页授权接口URL，通过CODE换取网页ACCESS_TOKEN  * 获取公众号用户信息URL  * 包含OpenId  */</span> <span class="token keyword">public</span> String webTokenUrl <span class="token operator">=</span> <span class="token string">"https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取网页授权access_token以及用户openId的url为 ==> https://api.weixin.qq.com/sns/oauth2/access_token?appid=wx547e0ea14ea62cd7&amp;secret=53e8717186cf3952fd8067ec160cbffe&amp;code=0414uSll2bq0C74tKOll2WAePU04uSlx&amp;grant_type=authorization_code</span> <span class="token comment" spellcheck="true">/**  * 微信获取用户基本信息URL  * 包含用户昵称头像等信息  */</span> <span class="token keyword">public</span> String baseUserUrl <span class="token operator">=</span> <span class="token string">"https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>1.h5登录新增账户 无phonenumber 产生记录accountId-phonenumber<br>2.微信公众号登录 无openId 产生记录accountId-appletsOpenId-unionId<br>3.微信小程序登录 无openId 合并记录accountId-publicOpenId-unionId<br>4.绑定手机号,将openId那条记录合并到手机号那条记录</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>延时消息</title>
      <link href="/2021/08/16/yan-shi-xiao-xi/"/>
      <url>/2021/08/16/yan-shi-xiao-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>维护调度平台,有个核心功能就是定时任务,我自己比较常用的调度框架是quartz.比如一个常见的业务场景:用户下单后指定时间未支付取消订单.</p><p>实现这类需求,常见的方式有俩种:</p><ol><li>轮询定时任务：给定周期内扫描所有未支付的订单，查看时间是否到期。</li><li>延时消息：过期自动触发,订单创建的时候发送一条 N 分钟到期的信息，一旦消息消费后便可判断订单是否可以取消。</li></ol><h2 id="quartz定时扫描"><a href="#quartz定时扫描" class="headerlink" title="quartz定时扫描"></a>quartz定时扫描</h2><p>先看第一种，这类方式实现较为简单，只需要启动一个定时任务即可；但缺点同样也很明显，这个间隔扫描的时间不好控制。</p><p>给短了会造成很多无意义的扫描，增大数据库压力，给长了又会使得误差较大。</p><p>当然最大的问题还是效率较低，随着订单增多耗时会呈线性增长，最差的情况甚至会出现上一波轮询还没有扫描完，下一波调度又来了。</p><p>这个问题在quartz里我是这么解决的<br>首先介绍下,在分布式定时任务中（或者集群），quartz默认采取乐观锁,允许多个线程同时拉取同一个trigger。能够保证同一时刻只会有一个定时任务运行。在Job的实现类上加这个注解@DisallowConcurrentExecution,它可以禁止并发执行多个相同定义的JobDetail,也就是上一个任务没有同时执行完,下个任务不会执行.这样就很大程度上避免了重复处理相同数据.<br>但其实还是有个明显的问题,比如说,业务执行到一半发生了异常,这个定时任务会一直未执行结束,不可能后面的任务一直在等,我们可以用Future这个接口,它提供了检查计算是否完成等方法.在指定时间内没有完成计算，则会抛出TimeoutException.这个时候我们可以处理这部分异常数据了.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"------------MessageSendJob,发送定时任务开始------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future <span class="token operator">=</span> threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                    <span class="token punctuation">{</span>                        <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//记录日志</span>        <span class="token punctuation">}</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"------------MessageSendJob,发送定时任务结束------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但总归定时任务定时扫描会造成很多不必要的扫描,这时第二种方案就要显得靠谱多了，实时性也比较高。</p><h2 id="过期自动触发"><a href="#过期自动触发" class="headerlink" title="过期自动触发"></a>过期自动触发</h2><ol><li><p>使用 DelayQueue, 只需要有一个线程不断从队列中获取数据即可，它的优点是不用引入第三方依赖，实现也很简单，缺点也很明显，它是内存存储，对分布式支持不友好，如果发生单点故障，可能会造成数据丢失，无界队列还存在 OOM 的风险。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> DelayQueue delayQueue  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             delayQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyDelayedTask</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Delayed take <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>take<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用Redis键通知,默认情况下 Redis 服务器端是不开启键过期通知的，需要我们通过 config set notify-keyspace-events Ex 的命令手动开启，开启键过期通知后，我们就可以拿到每个键值过期的事件，利用这个机制实现了给每个key开启一个定时任务的功能。使用 Redis 可以将数据持久化到磁盘，规避了数据丢失的风险，并且支持分布式，避免了单点故障。并且它能监听集群，可以建立多个redis连接，分别对每个redis的key过期进行监听。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 配置 RedisListenerConfig 实现监听 Redis key 过期时间*/</span> <span class="token annotation punctuation">@Bean</span> RedisMessageListenerContainer <span class="token function">container1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> RedisMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     JedisConnectionFactory jedisConnectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPoolConfig</span><span class="token punctuation">(</span><span class="token function">jedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>jedisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> container<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**   * 针对 redis 数据失效事件，进行数据处理  * @param message  * @param pattern  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>     String key <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取到失效的 key</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"product_check"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"监听过期key成功,key => {}"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>         String productId <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         String orderId <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         TOrder order <span class="token operator">=</span> TOrder<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">productId</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderStatus</span><span class="token punctuation">(</span>CommonConstants<span class="token punctuation">.</span>OrderStatus<span class="token punctuation">.</span>RELEASE_PAY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>kafka时间轮，实现难度大，内存消耗大<br>时间轮其实本质上它就是一个指定长度的环形数组,每个任务会依据时间占一个格子,同时需要记录它所对应的圈数,不然同一个格子上会有重复的延时消息,并且我们取出的时候需要判断圈数是否为0,如果不为0,圈数得减1.这样就可避免轮询所有的任务，不过如果时间轮的槽比较少，导致某一个槽上的任务非常多那效率也比较低，这就和 HashMap 的 hash 冲突是一样的。</p></li><li><p>订单过期不删除，查询订单，对过期时间作校验，如果过期则删除，缺点如果一直不访问订单，则库存一直无法回滚</p></li><li><p>redis实现延迟队列</p></li></ol><ul><li>向job池put一个元数据,状态是不可消费</li><li>以jobId作为value，delayTime作为score 存到多个bucket延迟桶 中,提高扫描速度，降低消息延迟.</li><li>多线程扫描归属bucket 中的最接近当前时间的延迟数据,如果当前时间超过延迟时间,区分是超时重试任务还是延迟任务,如果是超时任务,判断是否超过最大重试次数,如果超过就删除延迟桶中的数据,同时将元数据置为搁置状态,以便问题追踪.如果没有,就跟延迟任务一样处理,将元数据置为待消费状态,搬运桶中数据到准备队列.删除延迟桶中数据</li><li>消费端消费准备队列数据,将元数据置为已消费状态,同时设定TTR,重新计算延迟时间,放入延迟桶.处理完成后,删除元数据,并且要删除延迟桶中ttr的数据,防止消息延迟重复消息的产生</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>延时任务实现的方式还是很多的,如果有现成的组件直接用就可以了,比如rocketmq,它自带处理延时消息的功能。如果不行,结合自己业务,技术栈,选择合适的方式.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 延时消息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quartz </tag>
            
            <tag> redis </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次使用fastjson拷贝对象的bug</title>
      <link href="/2021/08/09/dui-xiang-kao-bei-ceng-ji-bug/"/>
      <url>/2021/08/09/dui-xiang-kao-bei-ceng-ji-bug/</url>
      
        <content type="html"><![CDATA[<p>执行下面这行代码</p><pre class="line-numbers language-java"><code class="language-java">ModelVo modelVo <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">,</span> ModelVo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错<br><code>fastjson  java.lang.IllegalArgumentException: argument type mismatch</code></p><p><em>原因就是内部类的层次不够。以下面的例子举例</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelVo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Data data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Row<span class="token operator">></span> rows<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Row</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该改成这样</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelVo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Data data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Row<span class="token operator">></span> rows<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Row</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据汇总按日分组统计</title>
      <link href="/2019/10/10/an-ri-fen-zu-wu-shu-ju-bu-0/"/>
      <url>/2019/10/10/an-ri-fen-zu-wu-shu-ju-bu-0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有个需求需要按日期分组（group by）统计，没有数据补0<br>之前做过类似的需求,那时候因为数据量比较大,业务也想对复杂,是通过定时任务统计前一天的数据到汇总表.然后查询的时候直接从汇总表去查就很easy了<br>这次因为业务比较简单,不想增加代码量,还需要建表,去写个定时任务,使简单的问题复杂化.我需要一张日期表，但我又不想建表。可以union all日期生成一张临时表然后左外连接你需要查询的数据表。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>打个比方你想查一个最近7天的数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>click_date<span class="token punctuation">,</span> ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>count1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count1<span class="token keyword">from</span> <span class="token punctuation">(</span>         <span class="token keyword">SELECT</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">1</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">2</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">3</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">4</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">5</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">6</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date<span class="token punctuation">)</span> <span class="token number">a</span>         <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">date</span><span class="token punctuation">(</span>alarmtime<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count1                    <span class="token keyword">from</span> error                    <span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">date</span><span class="token punctuation">(</span>alarmtime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>click_date <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span><span class="token keyword">datetime</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果查询条件复杂一些，比如说我想知道<strong>开始时间-结束时间</strong>的数据，这就不像7天，30天这样可以直接写在sql里了，而且如果我想知道一年，你也不可能一直在后面追加一年的日期<br>不过思路是对的，只不过这张日期表我们可以通过代码去拼接sql，通过mybatis的$字符串拼接,这样不管再长的间隔也不需要我们手动拼接了。</p><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//拿到指定开始时间-结束时间所有的日期</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> dateBetweenDays <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">getDateBetweenDays</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span>endDate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历日期拼接到sql里</span>StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT '%s' as timeDay union all "</span><span class="token punctuation">,</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT '%s' as timeDay"</span><span class="token punctuation">,</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"activityId"</span><span class="token punctuation">,</span> activityStaticReq<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">></span> shareResult <span class="token operator">=</span> tfAccShareRecordMapper<span class="token punctuation">.</span><span class="token function">querShare</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//最后在xml里拼接sql</span><span class="token keyword">select</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>timeDay<span class="token punctuation">,</span><span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> time<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>shareNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> shareNum<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>shareCount<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> shareCount<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>newUserNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> newUserNum    <span class="token keyword">from</span> <span class="token punctuation">(</span>${<span class="token keyword">table</span>}<span class="token punctuation">)</span> <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> DATE_FORMAT<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> dayTime<span class="token punctuation">,</span>                    <span class="token function">count</span><span class="token punctuation">(</span>account_id<span class="token punctuation">)</span>                    shareNum<span class="token punctuation">,</span>                    <span class="token function">sum</span><span class="token punctuation">(</span>share_record_count<span class="token punctuation">)</span>         shareCount<span class="token punctuation">,</span>                    <span class="token function">sum</span><span class="token punctuation">(</span>is_new_user<span class="token punctuation">)</span>                     newUserNum                    <span class="token keyword">from</span> tf_acc_share_record o                    <span class="token keyword">where</span> o<span class="token punctuation">.</span>activity_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{activityId}</span>                    <span class="token keyword">group</span> <span class="token keyword">by</span> DATE_FORMAT<span class="token punctuation">(</span>o<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">on</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>timeDay<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>dayTime <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>timeDay            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>没有一劳永逸的方案,持续尝试,才能写出更好的代码</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 业务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法的参数传递机制</title>
      <link href="/2019/10/03/fang-fa-de-can-shu-chuan-di-ji-zhi/"/>
      <url>/2019/10/03/fang-fa-de-can-shu-chuan-di-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>今天有个同事问了我一个基础问题,虽然比较基础,但平常写业务代码,有时候不注意往往会忽略这些小细节.<br> <img src="/images/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92q.png" alt="他问我b为什么显示没用到,原理是啥"><br> 回答这个问题之前我们需要明白形参和实参在传递不同数据类型时的区别</p><ul><li><p>形参和实参</p><ul><li><p>形参是基本数据类型，传递数据值</p></li><li><p>形参是引用数据类型，传递地址值，String、包装类等对象不可变<br>下面是我写的测试demo,大家就能看出区别了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testParamTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  User a <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User c <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  String s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>  <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>User a<span class="token punctuation">,</span> User b<span class="token punctuation">,</span> User c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  b <span class="token operator">=</span> a<span class="token punctuation">;</span>  b<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出<span class="token operator">:</span><span class="token comment" spellcheck="true">//a->User(phone=null, name=null, age=12)</span><span class="token comment" spellcheck="true">//b->User(phone=null, name=null, age=null)</span><span class="token comment" spellcheck="true">//c->User(phone=null, name=null, age=18)</span><span class="token comment" spellcheck="true">//d->0</span><span class="token comment" spellcheck="true">//e->123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>注:还有个需要注意的地方如果是不同的jvm,比如rpc调用还是值传递,并非引用传递.这个坑我自己踩过.😔</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
