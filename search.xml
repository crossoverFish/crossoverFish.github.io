<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shardsphere分表</title>
      <link href="/2022/02/19/shardsphere-fen-biao/"/>
      <url>/2022/02/19/shardsphere-fen-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ShardSphere-简介"><a href="#1-ShardSphere-简介" class="headerlink" title="1 ShardSphere 简介"></a>1 ShardSphere 简介</h1><blockquote><p>Sharding-Sphere是一套开源的分布式数据库中间件,是Apache的顶级项目,支持数据分片、读写分离，同时兼容多种数据库，通过可插拔架构，理想情况下，可以做到对业务代码无感知。<br>ShardingSphere下有两款成熟的产品：sharding jdbc和sharding proxy。</p></blockquote><h1 id="2-背景"><a href="#2-背景" class="headerlink" title="2 背景"></a>2 背景</h1><p>系统上线后发现埋点表和接口日志表2天的数据量就已经300万的数据了,单表数据量太大且持续增长,查询操作非常耗时,决定使用分表中间件：ShardingSphere。</p><h1 id="3-需求"><a href="#3-需求" class="headerlink" title="3 需求"></a>3 需求</h1><ul><li>集成多数据源</li><li>分表可配置分片周期</li><li>动态建表</li><li>支持分片表变更表结构</li></ul><h1 id="4-实现方式"><a href="#4-实现方式" class="headerlink" title="4 实现方式"></a>4 实现方式</h1><ul><li>使用dynamic-datasource-spring-boot-starter组件集成多数据源,将不参与分表的数据源独立于Shardsphere之外,<strong>对分表的SQL使用sharding jdbc数据源，对不涉及到分表的SQL，使用普通数据源。</strong></li><li>使用标准分片策略对日期精准分片 ,对于范围日期条件,支持范围分片查询</li><li>项目初始化缓存所有分片表名,对于分片表名,如果缓存匹配不上,需要新建分片表</li><li>可在 td_activity_param 表配置分片表原始表结构,后台执行建表语句</li></ul><h2 id="集成-sharding-jdbc"><a href="#集成-sharding-jdbc" class="headerlink" title="集成 sharding jdbc"></a>集成 sharding jdbc</h2><ul><li>引入依赖<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="配置多数据源和分片规则"><a href="#配置多数据源和分片规则" class="headerlink" title="配置多数据源和分片规则"></a>配置多数据源和分片规则</h2><pre class="line-numbers language-yml"><code class="language-yml">spring:  datasource:    dynamic:      datasource:        master:          type: com.alibaba.druid.pool.DruidDataSource          driver-class-name: com.mysql.cj.jdbc.Driver          url: jdbc:mysql://10.20.16.74:3306/wo2b2c?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&useTimezone=true&rewriteBatchedStatements=true          username: wo2b2c          password: wo2b2c          initialSize: 4          minIdle: 4          maxActive: 30          testWhileIdle: true          timeBetweenEvictionRunsMillis: 90000          minEvictableIdleTimeMillis: 180000          removeAbandoned: true          name: core-master          connectionInitSqls: SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci        slave-one:          type: com.alibaba.druid.pool.DruidDataSource          driver-class-name: oracle.jdbc.OracleDriver          url: jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 130.51.9.114)(PORT = 1521)))(CONNECT_DATA = (SERVICE_NAME = ngprm)))          username: GD_UCR_SALE_CEN          password: oRaCle2jUn16_cL          maxActive: 30          minIdle: 4          initialSize: 4          testWhileIdle: true          timeBetweenEvictionRunsMillis: 90000          minEvictableIdleTimeMillis: 180000          poolPreparedStatements: true          removeAbandoned: true          connectionPropertie: oracle.net.CONNECT_TIMEOUT=6000;oracle.jdbc.ReadTimeout=30000          keepAlive: true      primary: master  shardingsphere:    shard-cycle: "{tf_t_out_record: 5, tf_sm_user_clicking_rate: 10}"    props:      sql.show: true    datasource:      names: source-one      source-one:        type: com.alibaba.druid.pool.DruidDataSource        initialSize: 5        minIdle: 5        maxActive: 20        driverClassName: com.mysql.cj.jdbc.Driver        url: jdbc:mysql://10.20.16.74:3306/wo2b2c?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8&useTimezone=true        username: wo2b2c        password: wo2b2c    sharding:      default-data-source-name: source-one      tables:        tf_t_out_record:          actualDataNodes: source-one.tf_t_out_record          tableStrategy:            standard:              shardingColumn: start_time              preciseAlgorithmClassName: com.ai.market.core.multidatasource.shard.DateShardingAlgorithm              range-algorithm-class-name: com.ai.market.core.multidatasource.shard.DateShardingAlgorithm        tf_sm_user_clicking_rate:          actualDataNodes: source-one.tf_sm_user_clicking_rate          tableStrategy:            standard:              shardingColumn: sysdate              preciseAlgorithmClassName: com.ai.market.core.multidatasource.shard.DateShardingAlgorithm              range-algorithm-class-name: com.ai.market.core.multidatasource.shard.DateShardingAlgorithm    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集成多数据源"><a href="#集成多数据源" class="headerlink" title="集成多数据源"></a>集成多数据源</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Lazy</span>  <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"shardingDataSource"</span><span class="token punctuation">)</span>  AbstractDataSourceAdapter shardingDataSource<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> DynamicDataSourceProvider <span class="token function">dynamicDataSourceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> DataSourceProperty<span class="token operator">></span> datasourceMap <span class="token operator">=</span> dynamicDataSourceProperties<span class="token punctuation">.</span><span class="token function">getDatasource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AbstractDataSourceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> DataSource<span class="token operator">></span> <span class="token function">loadDataSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> DataSource<span class="token operator">></span> dataSourceMap <span class="token operator">=</span> <span class="token function">createDataSourceMap</span><span class="token punctuation">(</span>datasourceMap<span class="token punctuation">)</span><span class="token punctuation">;</span>              dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>SHARDING_DATA_SOURCE_NAME<span class="token punctuation">,</span> shardingDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> dataSourceMap<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Primary</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DynamicDataSourceProvider dynamicDataSourceProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>      DynamicRoutingDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicRoutingDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>dynamicDataSourceProperties<span class="token punctuation">.</span><span class="token function">getPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setStrict</span><span class="token punctuation">(</span>dynamicDataSourceProperties<span class="token punctuation">.</span><span class="token function">getStrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>dynamicDataSourceProperties<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>dynamicDataSourceProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setP6spy</span><span class="token punctuation">(</span>dynamicDataSourceProperties<span class="token punctuation">.</span><span class="token function">getP6spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dataSource<span class="token punctuation">.</span><span class="token function">setSeata</span><span class="token punctuation">(</span>dynamicDataSourceProperties<span class="token punctuation">.</span><span class="token function">getSeata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化缓存所有分片表名"><a href="#初始化缓存所有分片表名" class="headerlink" title="初始化缓存所有分片表名"></a>初始化缓存所有分片表名</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tableNameCacheReload</span><span class="token punctuation">(</span>String schemaName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String tableExistKey <span class="token operator">=</span> RedisKeyUtil<span class="token punctuation">.</span><span class="token function">getTableExistList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> tableNameList <span class="token operator">=</span> shardMapper<span class="token punctuation">.</span><span class="token function">getAllTableNameBySchema</span><span class="token punctuation">(</span>schemaName<span class="token punctuation">)</span><span class="token punctuation">;</span>      RedisUtil<span class="token punctuation">.</span>KeyOps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>tableExistKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      RedisUtil<span class="token punctuation">.</span>ListOps<span class="token punctuation">.</span><span class="token function">leftPushAll</span><span class="token punctuation">(</span>tableExistKey<span class="token punctuation">,</span> tableNameList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标准分片策略精准分片算法"><a href="#标准分片策略精准分片算法" class="headerlink" title="标准分片策略精准分片算法"></a>标准分片策略精准分片算法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">doSharding</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> availableTargetNames<span class="token punctuation">,</span> PreciseShardingValue<span class="token operator">&lt;</span>Date<span class="token operator">></span> preciseShardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Date date <span class="token operator">=</span> preciseShardingValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sharding input:"</span> <span class="token operator">+</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>      String logicTableName <span class="token operator">=</span> preciseShardingValue<span class="token punctuation">.</span><span class="token function">getLogicTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String suffix <span class="token operator">=</span> <span class="token function">getSuffixBySpecifyCycle</span><span class="token punctuation">(</span>logicTableName<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">shardingTablesCheckAndCreatAndReturn</span><span class="token punctuation">(</span>logicTableName<span class="token punctuation">,</span> logicTableName<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取分片表名"><a href="#获取分片表名" class="headerlink" title="获取分片表名"></a>获取分片表名</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> String <span class="token function">getSuffixBySpecifyCycle</span><span class="token punctuation">(</span>String logicTableName<span class="token punctuation">,</span> Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Integer specifyInterval <span class="token operator">=</span> ShardingAlgorithmTool<span class="token punctuation">.</span>shardCycleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>logicTableName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>specifyInterval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          specifyInterval <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultCycle<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      NumberFormat nf <span class="token operator">=</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      nf<span class="token punctuation">.</span><span class="token function">setMinimumIntegerDigits</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> currentMonth <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> currentDate <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> cycleDate <span class="token operator">=</span> currentDate <span class="token operator">%</span> specifyInterval <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>currentDate <span class="token operator">/</span> specifyInterval <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> specifyInterval <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>currentDate <span class="token operator">/</span> specifyInterval<span class="token punctuation">)</span> <span class="token operator">*</span> specifyInterval <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      String concatTableName <span class="token operator">=</span> <span class="token string">"_"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>nf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>currentMonth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>nf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>cycleDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> concatTableName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不存在自动建表"><a href="#不存在自动建表" class="headerlink" title="不存在自动建表"></a>不存在自动建表</h2><p>这里参考了双重检查的思想,存在则返回,不存在才加锁再次校验,避免并发重复建表的错误</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">shardingTablesCheckAndCreatAndReturn</span><span class="token punctuation">(</span>String logicTableName<span class="token punctuation">,</span> String resultTableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"logicTableName:[{}],resultTableName:[{}]"</span><span class="token punctuation">,</span> logicTableName<span class="token punctuation">,</span> resultTableName<span class="token punctuation">)</span><span class="token punctuation">;</span>      String tableExistKey <span class="token operator">=</span> RedisKeyUtil<span class="token punctuation">.</span><span class="token function">getTableExistList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List tableExistList <span class="token operator">=</span> RedisUtil<span class="token punctuation">.</span>ListOps<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>tableExistKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tableExistList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>resultTableName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> resultTableName<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      String simpleUUID <span class="token operator">=</span> IdUtil<span class="token punctuation">.</span><span class="token function">fastSimpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String lockKey <span class="token operator">=</span> RedisKeyUtil<span class="token punctuation">.</span><span class="token function">getTableExistKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">boolean</span> lock <span class="token operator">=</span> RedisUtil<span class="token punctuation">.</span>LockOps<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> simpleUUID<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>              tableExistList <span class="token operator">=</span> RedisUtil<span class="token punctuation">.</span>ListOps<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>tableExistKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>tableExistList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>resultTableName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> resultTableName<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              String createTableSql <span class="token operator">=</span> shardMapper<span class="token punctuation">.</span><span class="token function">selectTableCreateSql</span><span class="token punctuation">(</span>logicTableName<span class="token punctuation">)</span><span class="token punctuation">;</span>              logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"createTableSql:{}"</span><span class="token punctuation">,</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>createTableSql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              createTableSql <span class="token operator">=</span> createTableSql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE"</span><span class="token punctuation">,</span> <span class="token string">"CREATE TABLE IF NOT EXISTS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              createTableSql <span class="token operator">=</span> createTableSql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>logicTableName<span class="token punctuation">,</span> resultTableName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>shardMapper<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span>createTableSql<span class="token punctuation">)</span><span class="token punctuation">;</span>              RedisUtil<span class="token punctuation">.</span>ListOps<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>tableExistKey<span class="token punctuation">,</span> resultTableName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"建表异常:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          RedisUtil<span class="token punctuation">.</span>LockOps<span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> simpleUUID<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> resultTableName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shard </category>
          
          <category> multi source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shard-jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2021/08/23/mysql/"/>
      <url>/2021/08/23/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h1><h2 id="1-索引简介"><a href="#1-索引简介" class="headerlink" title="1. 索引简介"></a>1. 索引简介</h2><h3 id="1-1-索引是什么"><a href="#1-1-索引是什么" class="headerlink" title="1.1 索引是什么"></a>1.1 索引是什么</h3><ul><li>索引是帮助MySQL快速获取数据的数据结构。除了数据本身之外:数据库还维护着一个排好序的数据结构，这些数据结构以某种方式指向数据</li><li>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上</li></ul><h3 id="1-2-索引的优势"><a href="#1-2-索引的优势" class="headerlink" title="1.2 索引的优势"></a>1.2 索引的优势</h3><ul><li>类似大学图书馆建书目索引，提高数据检索的效率，<strong>降低数据库的I0成本</strong></li><li>通过索引列对数据进行排序，降低数据排序的成本，<strong>降低了CPU的消耗</strong></li></ul><h3 id="1-3-索引的劣势"><a href="#1-3-索引的劣势" class="headerlink" title="1.3 索引的劣势"></a>1.3 索引的劣势</h3><ul><li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。</li><li>因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息</li></ul><h3 id="1-4-索引的分类"><a href="#1-4-索引的分类" class="headerlink" title="1.4 索引的分类"></a>1.4 索引的分类</h3><ul><li><p>聚簇索引</p><ul><li><p>主键索引<br>随表一起创建，属于聚集索引，不允许有空值.</p></li><li><p>如果没有主键也没有合适的唯一索引，那么innodb内部会生成一个隐藏的主键作为聚集索引</p></li></ul></li></ul><ul><li><p>辅助索引</p><ul><li>单值索引<br>一个索引只包含单个列，一个表可以有多个单值索引</li><li>复合索引<br>一个索引包含多个列</li><li>唯一索引<br>索引列的值必须唯一，但允许有空值</li></ul></li></ul><blockquote><p>多个单列索引在多条件查询时优化器会选择最优索引策略，可能只用一个索引，也可能将多个索引全用上！ 但多个单列索引底层会建立多个B+索引树，比较占用空间，也会浪费一定搜索效率，故如果只有<strong>多条件联合查询时最好建联合索引！</strong></p></blockquote><h3 id="1-5-索引的结构"><a href="#1-5-索引的结构" class="headerlink" title="1.5 索引的结构"></a>1.5 索引的结构</h3><ul><li><p>查找顺序: 加载磁盘到内存–&gt;二分查找确定指针–&gt;查找真实数据</p></li><li><p>B- 树: B-tree的关键字和记录是放在一起的，叶子节点不包含任何信息<br><img src="/images/b-tree.png" alt="b-tree"> </p></li><li><p>B+ 树</p><ul><li>B+tree的非叶子节点中只有关键字和指向下一个磁盘的指针，记录只放在叶子节点中，表数据是和主键值一起存储，主键索引的叶结点存储行数据。对于普通索引，其叶子节点存储的是主键值。</li><li>B+树的磁盘读写代价更低,b+树的内部节点并没有指向关键字具体信息的指针，因此相较btree能够存放更多关键字，IO次数相对较低了</li><li>B+树的查找效率更稳定，所有关键字的查询路径一致，都是到叶子节点</li><li>B+树比较次数多但IO次数低,B树比较次数少，但IO次数多</li></ul></li></ul><p><img src="/images/btree.png" alt="btree"> </p><h3 id="1-6-哪些情况建索引"><a href="#1-6-哪些情况建索引" class="headerlink" title="1.6 哪些情况建索引"></a>1.6 哪些情况建索引</h3><ul><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其它表关联的字段，外键关系建立索引</li><li>单键/组合索引的选择问题(在高并发下倾向创建组合索引)</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li><li>查询中统计或者分组字段</li></ul><h3 id="1-7-哪些情况不需要建索引"><a href="#1-7-哪些情况不需要建索引" class="headerlink" title="1.7 哪些情况不需要建索引"></a>1.7 哪些情况不需要建索引</h3><ul><li>表记录太少</li><li>频繁更新的表不适合创建索引一因为每次更新不单单是更新了记录还会更新索引，加重了I0负担</li><li>数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。</li></ul><h2 id="2-优化分析"><a href="#2-优化分析" class="headerlink" title="2. 优化分析"></a>2. 优化分析</h2><h3 id="2-1-sql优化一般步骤"><a href="#2-1-sql优化一般步骤" class="headerlink" title="2.1 sql优化一般步骤"></a>2.1 sql优化一般步骤</h3><ul><li>通过慢查询日志等定位那些执行效率较低的SQL语句</li><li>尽可能通过Explain执行计划分析sql执行信息,调整sql的写法来达到建立并选择合适的索引</li></ul><h3 id="2-2-慢查询日志"><a href="#2-2-慢查询日志" class="headerlink" title="2.2 慢查询日志"></a>2.2 慢查询日志</h3><ul><li><p>开启慢查询日志</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 是否开启</span><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'%slow_query_log%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查看阈值</span><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'long_query_time%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 如何开启</span><span class="token comment" spellcheck="true">-- linux下打开需在my.cnf的[mysqld]选项下增加</span><span class="token comment" spellcheck="true">-- Windows在my.ini配置文件的[mysqld]选项下增加</span><span class="token comment" spellcheck="true">-- sql 设置</span><span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log_file<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span>slow_query_log<span class="token punctuation">.</span>txt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加完成之后记得一定要重启mysql服务才能生效记录输出; 核查一下是否生效</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> '<span class="token operator">%</span>query<span class="token operator">%</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-3-Explain"><a href="#2-3-Explain" class="headerlink" title="2.3 Explain"></a>2.3 Explain</h3><blockquote><p>使用EXPLAIN关键字可以<strong>模拟优化器执行SQL查询语句</strong>，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈.需要重点关注的字段<strong>type、rows、extra</strong>。</p></blockquote><p><strong>Explain各字段解释</strong></p><ul><li><strong>id</strong>:  表示执行select字句查询或操作的顺序,id 相同，执行顺序由上至下,id 不同,id 值越大优先级越高，越先被执行 </li><li><strong>select_type</strong>: 查询的类型,主要是用于区别普通查询、联合查询、子查询等的复杂查询</li><li><strong>table</strong>: 显示这一行的数据是关于哪张表的</li><li><strong>type</strong>: 查询的访问类型。是较为重要的一个指标,结果值从最好到最坏依次是：<br> ==system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt;ALL== ，一般来说，得保证查询至少达到 range 级别，最好能达到 <strong>ref</strong>.</li><li><strong>possible_keys</strong>: 显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一 定被查询实际使用.</li><li><strong>key_len</strong>: 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。 key_len 字段能够帮你检查是否充分的利用上了索引。ken_len 越长，说明索引使用的越充分。</li><li><strong>ref</strong>: 显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</li><li><strong>rows</strong>: 显示 MySQL 认为它执行查询时必须检查的行数。越少越好！</li><li><strong>extra</strong>: 其他的额外重要的信息<br>  <strong>Using filesort</strong>: 说明 mysql 会<strong>对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取</strong>。MySQL 中无法利用索引 完成的排序操作称为“文件排序”。出现 filesort 的情况<br>  <strong>Using temporary</strong>: 使了用临时表保存中间结果,MySQL <strong>在对查询结果排序时使用临时表</strong>。常见于排序 order by 和分组查询 group by<br>  <strong>Using index</strong>: Using index 代表表示相应的 select 操作中使用了<strong>覆盖索引(Covering Index)，避免访问了表的数据行</strong>，效率不错！ 如果同时出现 using where，表明用上了覆盖索引,但是没用上索引条件<br>  <strong>Using where</strong>: 表明使用了 where 过滤。</li></ul><h2 id="3-Sql优化"><a href="#3-Sql优化" class="headerlink" title="3. Sql优化"></a>3. Sql优化</h2><h3 id="3-1-索引优化"><a href="#3-1-索引优化" class="headerlink" title="3.1 索引优化"></a>3.1 索引优化</h3><ul><li><p>select能和复合索引字段全值匹配是最好的,这样使用覆盖索引就不需要回表查询</p></li><li><p>where条件必须包含最左列索引才会用上索引，如果索引顺序变化mysql会自动优化，但<strong>不能跳过中间索引</strong>，否则索引使用不充分。</p></li><li><p>对于单列索引，尽量选择针对当前query过滤性更好的索引</p></li><li><p>在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p></li><li><p>对于大分页的场景,采用延迟关联的方式进行处理，减少SQL回表，但是要记得<strong>索引需要完全覆盖</strong>才有效果</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 普通的分页查询是逐一通过普通索引获得id然后回表查询，每次回表进行一次IO，造成相当大的性能浪费。</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> _t <span class="token keyword">where</span> <span class="token number">a</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">b</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">c</span> <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 通过使用覆盖索引查询返回需要的主键，再根据这些主键关联原表获得需要的行，批量匹配得到结果,这可以减少MySQL回表的次数，也避免了MySQL直接在原表上扫描那些需要丢弃的行数（实则在普通索引树上扫描，速度快很多</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span> _t t1<span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> _t <span class="token keyword">WHERE</span> <span class="token number">a</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> <span class="token number">b</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span> t2<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-2-索引失效"><a href="#3-2-索引失效" class="headerlink" title="3.2 索引失效"></a>3.2 索引失效</h3><ul><li><p>字符串不加单引号索引失效</p></li><li><p>在索引列上做任何操作(计算、函数、(自动or手动)类型转换)</p></li><li><p>mysql在使用不等于(!=或者&lt;&gt;)</p></li><li><p>or包含非索引字段就会索引失效</p></li><li><p>like以通配符开头(%ab.. )</p></li><li><p>is null ,is not null也无法使用索引</p></li><li><p>当访问的数据占整个表中数据的蛮大一部分时（一般是20%左右），优化器会选择通过聚集索引来查找数据。</p><blockquote><p>索引查询到指定数据后，还要再进行一次书签访问来查找整行的信息.虽然但访问的数据占整个表蛮大一部分时（一般20%），优化器会选择通过聚集索引来查找数据，因为顺序读的操作会远大于离散读。索引中数据是顺序存放的，但是再进行一次书签查找的数据则是无序的，变成了磁盘上的离散读操作</p></blockquote></li></ul><h3 id="3-3-小表驱动大表"><a href="#3-3-小表驱动大表" class="headerlink" title="3.3 小表驱动大表"></a>3.3 小表驱动大表</h3><blockquote><p>即小的数据集驱动大的数据集。</p></blockquote><p><img src="/images/image-20220526181459133.png" alt="image-20220526181459133"> </p><p>看以上两个for循环，总共循环的次数是一样的。但是对于mysql数据库而言，并不是这样了，我们尽量选择第②个for循环，也就是小表驱动大表。==数据库最伤神的就是跟程序连接和释放==，第一个建立了10000次链接，第二个建立了50次。假设连接了两次，每次做上百万次的数据集查询，查完就走，这样就只做了两次；相反建立了上百万次连接，申请连接释放反复重复，这样系统就受不了了。</p><p>not in 和not exists如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。</p><ul><li><p>Exists</p><blockquote><p> 将主查询的数据放到子查询中做条件验证，根据验证结果（TRUE或者FALSE）来决定查询的数据结果是否保留。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 这里的select 1并不绝对，可以写为select 'X'或者'A','B','C'都可以，只要是常量就可以。</span><span class="token comment" spellcheck="true">-- 当B表的数据集必须大于A表的数据集时，用exists优于in,用到B表索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> B <span class="token keyword">where</span> B<span class="token punctuation">.</span>id <span class="token operator">=</span> A<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>In</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 当B表的数据集必须小于A表的数据集时，用in优于exists。,用到A表索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h1><blockquote><p>事务，对数据库的一个连接的操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。</p></blockquote><h3 id="1-四大特性"><a href="#1-四大特性" class="headerlink" title="1. 四大特性"></a>1. 四大特性</h3><ul><li><p><strong>原子性：</strong> 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部都执行，要么都不执行。</p></li><li><p><strong>一致性：</strong> 指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。</p></li><li><p><strong>隔离性：</strong> 多个事务并发访问时，事务之间是相互隔离的，一个事务不应该被其他事务干扰，多个并发事务之间要相互隔离。</p></li><li><p><strong>持久性：</strong> 表示事务完成提交后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。</p></li></ul><h3 id="2-四大隔离级别"><a href="#2-四大隔离级别" class="headerlink" title="2. 四大隔离级别"></a>2. 四大隔离级别</h3><ul><li><p>读未提交（<code>Read Uncommitted</code>）：允许读取未提交的记录，会发生脏读、不可重复读、幻读；</p></li><li><p>读已提交（<code>Read Committed</code>）：只允许读物已提交的记录，不会发生脏读，但会出现重复读、幻读；</p></li><li><p>可重复读（<code>Repeatable Read</code>）：不会发生脏读和不可重复读的问题，但会发生幻读问题；</p><ul><li>Mysql使用mvcc机制解决了快照读不可重复读的问题</li><li>Mysql使用间隙锁解决了当前读不可重复读的问题</li></ul></li><li><p>可串行化（<code>Serializable</code>）：即事务串行执行，以上各种问题自然也就都不会发生。</p></li></ul><h3 id="3-mvcc"><a href="#3-mvcc" class="headerlink" title="3. mvcc"></a>3. mvcc</h3><blockquote><p>MVCC（Multi-Version Concurrency Control ，多版本并发控制 指的就是在使用<code>READ COMMITTD</code>、<code>REPEATABLE READ</code>这两种隔离级别的事务在执行普通的<strong><code>SEELCT</code>操作时访问记录的版本链的过程</strong>,<code>READ COMMITTD</code>在每一次进行普通<code>SELECT</code>操作前都会生成一个<code>ReadView</code>，而<code>REPEATABLE READ</code>只在第一次进行普通<code>SELECT</code>操作前生成一个<code>ReadView</code>，之后的查询操作都重复这个<code>ReadView</code>,如果中间穿插了当前读,下一次<code>select</code>会重新生成<code>readview</code>。</p></blockquote><h4 id="3-1-版本链"><a href="#3-1-版本链" class="headerlink" title="3.1 版本链"></a>3.1 版本链</h4><p>对于使用<code>InnoDB</code>存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列：</p><p><code>trx_id</code>：<strong>事务编号,</strong>每次对某条聚簇索引记录进行改动时，都会把对应的事务id赋值给<code>trx_id</code>隐藏列。</p><p><code>roll_pointer</code>：<strong>指针</strong>,每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到<code>undo日志</code>中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p><h4 id="3-2-ReadView"><a href="#3-2-ReadView" class="headerlink" title="3.2 ReadView"></a>3.2 ReadView</h4><p>ReadView是一个数据结构，包含4个字段.</p><ul><li><p>m_ids:当前活跃的事务编号集合</p></li><li><p>. min_trx_id:最小活跃事务编号</p></li><li><p>max_trx_id:预分配事务编号，当前最大事务编号+1 </p></li><li><p>creator_trx_id:ReadView创建者的事务编号</p></li></ul><p><img src="/images/image-20220527095036369.png" alt="image-20220527095036369"> </p><h4 id="3-3-快照读和当前读"><a href="#3-3-快照读和当前读" class="headerlink" title="3.3 快照读和当前读"></a>3.3 快照读和当前读</h4><ul><li><p>快照读就是最普通的Select查询SQL语句</p></li><li><p>当前读指代执行下列语句时进行数据读取的方式</p></li></ul><p>​        lnsert、Update、Delete、Select…for updateSelect…lock in share mode</p><h1 id="锁介绍"><a href="#锁介绍" class="headerlink" title="锁介绍"></a>锁介绍</h1><p><img src="/images/image-20211216103302545.png" alt="image-20211216103302545"> </p><h2 id="1-兼容性"><a href="#1-兼容性" class="headerlink" title="1. 兼容性"></a>1. 兼容性</h2><h3 id="1-1-共享锁"><a href="#1-1-共享锁" class="headerlink" title="1.1 共享锁"></a>1.1 共享锁</h3><p>加了S锁的记录，允许其他事务再加S锁，不允许其他事务再加X锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share mode</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-排它锁"><a href="#1-2-排它锁" class="headerlink" title="1.2  排它锁"></a>1.2  排它锁</h3><p>加了X锁的记录，不允许其他事务再加S锁或者X锁</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 当我们对数据进行更新的时候，也就是INSERT、DELETE或者UPDATE的时候，数据库也会自动使用排它锁，防止其他事务对该数据行进行操作。</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>: 排它锁指的是，在某个事务获取数据的排它锁后，其他事务不能获取该数据的任何锁， <strong>并不代表其他事务不能无锁读取该数据。</strong></p><h2 id="2-加锁机制"><a href="#2-加锁机制" class="headerlink" title="2. 加锁机制"></a>2. 加锁机制</h2><blockquote><p>乐观锁和悲观锁并不是锁，而是锁的设计思想。</p></blockquote><h3 id="2-1-乐观锁"><a href="#2-1-乐观锁" class="headerlink" title="2.1 乐观锁"></a>2.1 <strong>乐观锁</strong></h3><p>认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，也就是不采用数据库自身的锁机制，而是通过程序来实现。在程序上，我们可以采用版本号机制</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 在表中设计一个版本字段 version，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行此时如果已经有事务对这条数据进行了更改，修改就不会成功。</span><span class="token keyword">UPDATE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">SET</span> version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> version<span class="token operator">=</span>version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-悲观锁"><a href="#2-2-悲观锁" class="headerlink" title="2.2 悲观锁"></a>2.2 悲观锁</h3><p>对数据被其他事务的修改持保守态度，会通过数据库自身的锁机制来实现，从而保证数据操作的排它性。</p><h3 id="2-3-适用场景"><a href="#2-3-适用场景" class="headerlink" title="2.3 适用场景"></a>2.3 适用场景</h3><ul><li><p>乐观锁适合读操作多的场景，相对来说写的操作比较少。它的优点在于程序实现，不存在死锁问题，</p></li><li><p>悲观锁适合写操作多的场景，因为写的操作具有排它性。采用悲观锁的方式，可以在数据库层面阻止其他事务对该数据的操作权限，防止读 - 写和写 - 写的冲突。</p></li><li><p><strong>避免死锁的发生</strong>：</p><ul><li>如果事务涉及多个表，操作比较复杂，那么可以尽量一次锁定所有的资源，而不是逐步来获取，这样可以减少死锁发生的概率；</li><li>如果事务需要更新数据表中的大部分数据，数据表又比较大，这时可将行级锁升级为为表级锁，从而减少死锁产生的概率；</li><li>不同事务并发读写多张数据表，可以约定访问表的顺序，采用相同的顺序降低死锁发生的概率</li></ul></li></ul><h2 id="3-锁粒度"><a href="#3-锁粒度" class="headerlink" title="3.  锁粒度"></a>3.  锁粒度</h2><h3 id="3-1-表级锁"><a href="#3-1-表级锁" class="headerlink" title="3.1 表级锁"></a>3.1 表级锁</h3><ol><li><p>概念: 表级锁一次会将整个表锁定</p></li><li><p>特点: 开销小，加锁快；锁定粒度大，发生锁冲突的概率最高,并发度最低。<strong>不会出现死锁</strong>；</p></li><li><p>如何加锁:</p><ul><li>隐式锁定：对于常见的 DDL 语句（如 <code>ALTER</code>、<code>CREATE</code> 等），InnoDB 会自动给相应的表加表级锁</li><li>显示锁定：在执行 SQL 语句时，也可以明确显示指定对某个表进行加锁,<code>lock table user read;</code></li></ul></li><li><p>意向锁: 一种特殊的表锁,意向锁提高了并发能力.有了意向锁,就不需要逐行去访问是否添加了行锁,并且不会阻塞行锁,效率提高很多</p><ul><li><p>==意向锁之间相互兼容,且不与行级锁互斥,它只会和表级的X，S发生冲突。==</p></li><li><p>意向共享锁(IS) :事务有意向对表中的某些行加<strong>共享锁</strong>（S锁）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。</span><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE MODE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>意向排他(IX)锁：事务有意向对表中的某些行加<strong>排他锁</strong>(x锁)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。</span><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="3-2-行级锁"><a href="#3-2-行级锁" class="headerlink" title="3.2 行级锁"></a>3.2 行级锁</h3><ol><li><p>概念:行级锁会锁住一行或多行记录</p></li><li><p>特点:  开销大，加锁慢；会出现死锁；<strong>锁定粒度最小</strong>，发生锁冲突的概率最低,并发度也最高。</p></li><li><p>如何加锁:</p><ul><li>隐式锁定: 对于常见的 DML 语句（如 <code>UPDATE</code>、<code>DELETE</code>），如果索引生效,InnoDB 会自动给相应的记录行加写锁</li><li>显示锁定：<code>SELECT * FROM table_name WHERE ... FOR UPDATE</code>，加行级写锁</li><li>InnoDB 存储引擎的行级锁是基于索引的,<strong>当索引失效或者说根本没有用索引的时候，行锁就会成表升级成表锁</strong>。</li></ul></li><li><p>分类:</p><ul><li><p>记录锁</p><ul><li>记录锁锁的是表中的某一条记录，记录锁的出现条件<strong>必须是精准命中索引并且索引是唯一索引</strong>，如主键id</li><li>所以说当一条sql没有走任何索引时，那么将会在每一条聚合索引后面加X锁</li></ul></li><li><p>间隙锁</p><ul><li><strong>间隙锁只会出现在可重复读的事务隔离级别中</strong>,==InnoDB 通过 MVCC 和 NEXT-KEY Locks，解决了在可重复读的事务隔离级别下出现幻读的问题。==</li><li><strong>间隙锁</strong>基于<code>非唯一索引</code>， 它可以锁定<strong>开区间</strong>内的部分记录。</li></ul></li><li><p>临键锁</p><ul><li><p>record lock + gap lock, 左开右闭区间。</p></li><li><p>默认情况下，innodb使用next-key locks来锁定记录。<code>select … for update</code></p></li><li><p>但当查询的索引含有唯一属性的时候，Next-Key Lock 会进行优化，将其降级为Record Lock，即仅锁住索引本身，不是范围。</p></li><li><p>Next-Key Lock在不同的场景中会退化:</p><p><img src="https://img-blog.csdnimg.cn/20181118210006461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4NDEyOTY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p></li></ul></li><li><p>插入意向锁</p><ul><li><p>插入意向锁是一种Gap锁，不是意向锁(表锁)，==在insert操作时产生==。</p></li><li><p><code>插入意向锁</code>在<strong>锁定区间相同</strong>但<strong>记录行本身不冲突</strong>的情况下<strong>互不排斥</strong>。</p></li><li><p>假设有一个记录索引包含键值4和7，不同的事务分别插入5和6，每个事务都会产生一个加在4-7之间的插入意向锁，获取在插入行上的排它锁，但是不会被互相锁住，因为数据行并不冲突。</p></li><li><p>插入意向锁不会阻止任何锁，对于插入的记录会持有一个记录锁。</p></li><li><p><strong>MySql InnoDB</strong> 在 <code>Repeatable-Read</code> 的事务隔离级别下，使用<code>插入意向锁</code>来控制和解决并发插入。</p></li></ul></li></ul></li></ol><h2 id="4-死锁"><a href="#4-死锁" class="headerlink" title="4. 死锁"></a>4. 死锁</h2><blockquote><p>死锁是指两个或多个事务在同一资源上相互占用,并请求锁定对方的资源,从而导致恶性循环的现象。</p></blockquote><h3 id="4-1-四个必要条件"><a href="#4-1-四个必要条件" class="headerlink" title="4.1 四个必要条件"></a>4.1 四个必要条件</h3><ul><li><p>互斥条件：<strong>资源</strong>只能由一个进程占用,别的进程想要占用必须等待上一个进程释放资源 (只有一副钥匙)</p></li><li><p>请求和保持条件:  <strong>进程</strong>已经持有一个资源没有释放，但又提出了新的资源请求(拿着红钥匙的人在没有归还红钥匙的情况下，又提出要蓝钥匙)</p></li><li><p>不剥夺条件: <strong>资源</strong>只能由持有进程释放,不能被其他进程剥夺(人除非归还了钥匙，不然一直占用着钥匙)</p></li><li><p>环路等待条件: 俩个进程相互等待对方持有资源.(拿着红钥匙的人在等蓝钥匙，同时那个拿着蓝钥匙的人在等红钥匙)</p></li></ul><h3 id="4-2-破坏死锁"><a href="#4-2-破坏死锁" class="headerlink" title="4.2 破坏死锁"></a>4.2 破坏死锁</h3><ul><li><p>破坏互斥条件</p><blockquote><p> 只有一副钥匙，这是形成死锁的最关键的原因。显然，如果我们能在两个线程跑之前，能给每个线程单独拷贝一份钥匙的副本，就能有效的避免死锁了。</p></blockquote></li><li><p>破坏环路等待条件</p><blockquote><p>可以强制规定任何线程取钥匙的顺序只能是 “先取蓝钥匙再取红钥匙”的话，就能避免死锁了。</p></blockquote></li></ul><ul><li><p>破坏不剥夺条件</p><blockquote><p>设置锁等待超时时间,如果等待超时,就释放自身锁资源</p></blockquote></li></ul><ul><li><p>破坏请求和保持条件</p><blockquote><p>通过轮询来尝试获取锁，如果有一个锁获取失败，则释放当前线程拥有的所有锁，等待下一轮再尝试获取锁。</p></blockquote></li></ul><ul><li>尽量开启死锁检测；</li><li>把加锁方式改为顺序加锁,避免通过交叉加锁，相互申请对方持有的锁。尽量一次性锁住所需要的行。</li><li>业务允许的情况下，降低隔离级别，RR级别下会有间隙锁，会提高死锁发生的概率。</li><li>多线程批量更新时,去除重复数据</li><li>大事务改成多个小事务</li></ul><h3 id="4-3-死锁案例"><a href="#4-3-死锁案例" class="headerlink" title="4.3 死锁案例"></a>4.3 死锁案例</h3><h4 id="4-3-1-加锁顺序不同"><a href="#4-3-1-加锁顺序不同" class="headerlink" title="4.3.1 加锁顺序不同"></a>4.3.1 加锁顺序不同</h4><ul><li><p>死锁原因: 表中有多个索引，对索引的访问顺序不同，造成死锁风险。</p></li><li><p>解决办法: 把加锁方式改为顺序加锁,避免通过交叉加锁，造成环路等待</p></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- (1001,'d001',0)</span><span class="token comment" spellcheck="true">-- 行级锁并不是直接锁记录，而是锁索引，如果一条SQL语句用到了主键索引，mysql会锁住主键索引；如果一条语句操作了非主键索引，mysql会先锁住非主键索引，再锁定主键索引</span><span class="token comment" spellcheck="true">-- num ->PRIMARY-> dept_no</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> dept_manager <span class="token keyword">WHERE</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- dept_no -> PRIMARY -> num</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> dept_manager <span class="token keyword">WHERE</span> dept_no <span class="token operator">=</span> <span class="token string">'d001'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-批量更新且数据重复"><a href="#4-3-2-批量更新且数据重复" class="headerlink" title="4.3.2 批量更新且数据重复"></a>4.3.2 批量更新且数据重复</h4><ul><li><p>死锁原因; 多个线程同时批量更新数据,对索引行加锁,如果没有全部修改完，索引是不会被放开的,所以当两个事务中同时进行更新时，如果有重复数据，有可能出现互相等待，从而爆死锁。</p></li><li><p>解决办法: </p><ul><li>将批量修改通过for循环改成单条修改，但是这个方法对服务器的压力增大</li><li>在获取数据的时候进行一次筛选，将重复的数据剔除出去</li><li>对数据进行排序,保证加锁有序</li></ul></li></ul><h3 id="4-4-死锁的排查与解决"><a href="#4-4-死锁的排查与解决" class="headerlink" title="4.4 死锁的排查与解决"></a>4.4 死锁的排查与解决</h3><p>1.查看正在锁的事务</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_LOCKS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220527160051538.png" alt="image-20220527160051538"> </p><p>2.查看等待锁的事务</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_LOCK_WAITS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220527160115441.png" alt="image-20220527160115441"> </p><p>3.查看在锁的事务</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_TRX<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20220527160133831.png" alt="image-20220527160133831"></p><p> 4.下面的查询可以得到当前状况下数据库的等待情况:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> r<span class="token punctuation">.</span>trx_id wait_trx_id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>trx_mysql_thread_id wait_thr_id<span class="token punctuation">,</span>r<span class="token punctuation">.</span>trx_query wait_query<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>trx_id block_trx_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>trx_mysql_thread_id block_thrd_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>trx_query block_query<span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>innodb_lock_waits w<span class="token keyword">inner</span> <span class="token keyword">join</span> information_schema<span class="token punctuation">.</span>innodb_trx <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>trx_id <span class="token operator">=</span> w<span class="token punctuation">.</span>blocking_trx_id<span class="token keyword">inner</span> <span class="token keyword">join</span> information_schema<span class="token punctuation">.</span>innodb_trx r <span class="token keyword">on</span> r<span class="token punctuation">.</span>trx_id <span class="token operator">=</span>w<span class="token punctuation">.</span>requesting_trx_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20220527163303911.png" alt="image-20220527163303911"></p><p>5.查看innodb状态(包含最近的死锁日志)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">engine</span> <span class="token keyword">innodb</span> <span class="token keyword">status</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.查询是否锁表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">OPEN</span> <span class="token keyword">TABLES</span> <span class="token keyword">where</span> In_use <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用策略模式优化条件判断</title>
      <link href="/2021/08/23/li-yong-ce-lue-mo-shi-you-hua-tiao-jian-pan-duan/"/>
      <url>/2021/08/23/li-yong-ce-lue-mo-shi-you-hua-tiao-jian-pan-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>利用策略模式优化过多 if else 代码<br>当业务场景比较复杂,如果if..else过多逻辑会很混乱,后期维护也比较头大,写着写着就会漏掉一些东西<br>我们的业务场景有各种各样的活动组件,每个活动用户参与后可能会给用户发送一些短信或者微信模板消息,但是数据封装,目标客群可能不太一样,我们要是想统一处理.肯定会有很多if..else区分场景</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>通知类型,这边用map去封装</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> NotifyEnum <span class="token punctuation">{</span> <span class="token function">CUTPRICE_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"cutPrice"</span><span class="token punctuation">,</span><span class="token string">"砍价成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"cutPriceSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SECKILL_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"secKill"</span><span class="token punctuation">,</span><span class="token string">"秒杀成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"secKillSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GROUP_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span><span class="token string">"拼团成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"groupSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>NotifyEnum<span class="token operator">></span> notifyMap <span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token punctuation">{</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>NotifyEnum<span class="token operator">></span> tempMap  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cutPrice"</span><span class="token punctuation">,</span>CUTPRICE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"secKill"</span><span class="token punctuation">,</span>SECKILL_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span>GROUP_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     notifyMap <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>tempMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/** 枚举值码 */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String commandType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** 枚举描述 */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String desc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 实现类  */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String clazz <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 得到枚举值码。  * @return 枚举值码。  */</span> <span class="token keyword">public</span> String <span class="token function">getCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> commandType<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 得到枚举描述。  * @return 枚举描述。  */</span> <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> desc<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 获取 class。  * @return class。  */</span> <span class="token keyword">public</span> String <span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> clazz<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 构建一个 。  * @param commandType 枚举值码。  * @param desc 枚举描述。  */</span>  <span class="token function">NotifyEnum</span><span class="token punctuation">(</span>String commandType<span class="token punctuation">,</span> String desc<span class="token punctuation">,</span> String clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>commandType <span class="token operator">=</span> commandType<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> NotifyEnum <span class="token function">buildFromNotifyType</span><span class="token punctuation">(</span>String notifyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>notifyType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> notifyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>notifyType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个异步通知接口,这里面定义了一些抽象方法，交给具体的业务实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**  * 发送异步消息前置处理  * @param param  * @return  */</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知真正实现接口  * @param param 入参  */</span> <span class="token keyword">void</span> <span class="token function">dealNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是异步通知接口的抽象类.因为数据装载已经在各个实现类准备好了,所以发送消息这部分业务,就可以抽出来公用了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractNotifyService</span> <span class="token keyword">implements</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>AbstractNotifyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知前置参数处理方法  * @param param  * @return  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知真正实现接口  * @param param 入参  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dealNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"真正开始进行异步通知处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//装载数据</span>     Object message <span class="token operator">=</span> <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//处理message</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是异步通知接口的其中一个实现,在里面我们可以具体beforeSendNotice这个方法；这些实现类都会注册到 Spring Bean 容器中供之后使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CutPriceSuccessNotifyServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNotifyService</span> <span class="token keyword">implements</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CutPriceSuccessNotifyServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知前置参数处理方法  * 主要目的是准备要发送的参数以及要给哪些人发送  * @param param  * @return  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始进行处理砍价成功异步通知 前置处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> null<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是一个异步通知工厂类,根据通知类型,获取通知api</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyServiceFactory</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> INotifyService<span class="token operator">></span> notifyServiceMap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 获取通知对象  * @param notifyEnum  * @return  */</span> <span class="token keyword">public</span> INotifyService <span class="token function">getNotifyService</span><span class="token punctuation">(</span>NotifyEnum notifyEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>     INotifyService notifyService <span class="token operator">=</span> notifyServiceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>notifyEnum<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> notifyService<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试一下是否返回正确的通知api</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"异步通知"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"获取异步通知"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getNotifyService/{commandType}"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getNotifyService</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"commandType"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>String commandType<span class="token punctuation">)</span><span class="token punctuation">{</span>     INotifyService notifyService <span class="token operator">=</span> notifyServiceFactory<span class="token punctuation">.</span><span class="token function">getNotifyService</span><span class="token punctuation">(</span>NotifyEnum<span class="token punctuation">.</span><span class="token function">buildFromNotifyType</span><span class="token punctuation">(</span>commandType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>notifyService<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了让类的职责更加单一、代码更加清晰。这里运用了工厂模式，虽然代码量增加了，但是后期维护拓展会很方便，比较符合开闭原则。当然还有种思路，在枚举里维护api class和类型的关系。根据class对象获取容器对象</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>过滤器和拦截器的区别</title>
      <link href="/2021/08/23/guo-lu-qi-he-lan-jie-qi-de-qu-bie/"/>
      <url>/2021/08/23/guo-lu-qi-he-lan-jie-qi-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>过滤器和拦截器的区别:</p><ol><li>过滤器 是基于函数回调的，拦截器 则是基于Java的反射机制（动态代理）实现的</li><li>过滤器 依赖Tomcat等容器,而拦截器(Interceptor) 它是一个Spring组件，并由Spring容器管理,是可以单独使用,获取IOC容器中的各个bean</li><li>过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。拦截器 Interceptor 是在请求进入servlet后，在进入Controller之前进行预处理的，Controller 中渲染了对应的视图之后请求结束。</li><li>过滤器几乎可以对所有进入容器的请求起作用，而拦截器只会对Controller中请求或访问static目录下的资源请求起作用。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>session和nosession系统</title>
      <link href="/2021/08/20/session-he-nosession-xi-tong/"/>
      <url>/2021/08/20/session-he-nosession-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="Sessio系统"><a href="#Sessio系统" class="headerlink" title="Sessio系统"></a>Sessio系统</h2><p>验证流程:</p><ul><li>当客户端A第一次发送请求后，nginx将这个请求分发给服务器1 </li><li>然后将服务器1 产生的Session 放入Redis中，此时客户端A、服务器1 和Redis中都会有一个相同的Session</li><li>当客户端A发送第二次请求的时候，nginx将请求分发给服务器2 （已知服务器2 中无Session）</li><li>因为客户端自己携带了一个Session，那么服务器2 就可以拿着客户端带来的Session中的ID去Redis中找到Session，找到这个Session后，就能正常执行之后的操作。</li></ul><p>认证缺点:</p><ul><li><p>对服务器的压力大：因为每个用户经过服务器认证之后，服务器都要做一次记录，通常这些记录都是保存在内存中，而随着认证用户的增多，服务器开销会明显增大。</p></li><li><p>程序扩展性变差：用户认证后，服务器做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须在这台服务器上才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力，也就意味着限制了扩展的能力。</p></li><li><p>安全性偏低：因为是基于cookie来进行用户识别的，cookie如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。</p></li></ul><h2 id="no-session系统"><a href="#no-session系统" class="headerlink" title="no session系统"></a>no session系统</h2><p>Token 验证流程：<br>当接收方接收到一个JWT的时候，首先要对这个JWT的完整性进行验证，这个就是签名认证。它验证的方法其实很简单，只要把header做base64url解码，就能知道JWT用的什么算法做的签名，然后用这个算法，再次用同样的逻辑对header和payload做一次签名，并比较这个签名是否与JWT本身包含的第三个部分的串是否完全相同，只要不同，就可以认为这个JWT是一个被篡改过的串，自然就属于验证失败了。接收方生成签名的时候必须使用跟JWT发送方相同的密钥，意味着要做好密钥的安全传递或共享</p><p>token+redis： 是自己生成个32位的key，value为用户和token信息，访问时解析token拿到用户标识,判断redis里是否有该用户信息.如果有，比对用户token，验证成功加载该用户信息完成登录。服务需要存储下发的每个用户对应的token及身份信息，维持其过期时间，好处是随时可以删除某个token，阻断该token继续使用.缺点：每次都要进行redis查询。占用redis存储空间。</p><p>JWT 验证流程：</p><ul><li>在头部信息中声明加密算法和常量， 然后把header使用json转化为字符串</li><li>在载荷中声明用户信息，同时还有一些其他的内容；再次使用json 把载荷部分进行转化，转化为字符串</li><li>使用在header中声明的加密算法和每个项目随机生成的secret来进行加密， 把第一步分字符串和第二部分的字符串进行加密， 生成新的字符串。字符串是独一无二的。</li><li>解密的时候，只要客户端带着JWT来发起请求，服务端就直接使用secret进行解密。</li></ul><p>JWT: 生成并发给客户端之后，后台是不用存储，客户端访问时会验证其签名、过期时间等再取出里面的信息（如username），再使用该信息直接查询用户信息完成登录验证。jwt自带签名、过期等校验，后台不用存储，缺陷是一旦下发，服务后台无法拒绝携带该jwt的请求（如踢除用户）；</p><p>token和jwt的区别:<br>服务端验证客户端发来的token信息要进行数据的查询操作；JWT验证客户端发来的token信息就不用， 在服务端使用密钥校验就可以，不用数据库的查询。</p><p>access_token和refresh_token双令牌无感知登录:<br>access_token<br>由后端颁发给前台,一般采用对称加密算法,可以反向解析出参数信息,如:用户ID,失效时间等<br>refresh_token<br>它的作用就是避免让用户重复输入账号密码登录再次验证<br>使用<br>一般我们可以将access_token的过期时间设置为2小时的，refresh_token的过期时间设置为1个月，然后用户第一次进来，用了一段时间access_token过期了，过期后前端携带refresh_token去获取新的access_token，返回的新的access_token依旧是2小时，那么除此之外，refresh_token自身再刷新一次，刷新一次后他还是1个月的过期时间(不累加)，这就保证了用户在一个月内只要访问了应用，就可以享受无感知的体验.<br>为什么不直接把accesstoken设长一店<br>access_token 泄露概率比较大,毕竟每次api请求都附带它,如果单独把 access_token 过期时间设置过长,一旦泄露,就相当于密码泄露<br>refresh_token 泄露概率比较小,只有每次access_token 失效时才会使用它,所以二者组合可以很好的避免token泄露带来的安全风险,同时又能保证用户体验</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springSecurity源码学习</title>
      <link href="/2021/08/18/springsecurity/"/>
      <url>/2021/08/18/springsecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用springboot+springSecurity+jwt实现基于token的权限管理</p><h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><ol><li><p>UsernamePasswordAuthenticationFilter过滤器获取用户登录的信息,调用authenticationManager.authenticate()进行身份验证</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Authentication <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                             HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 从输入流中获取到登录的信息</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         LoginUser loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LoginUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rememberMe<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getRememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> loginUser<span class="token punctuation">.</span><span class="token function">getRememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>                 <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ProviderManager是authenticationManager的一个默认实现,委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证,调用retrieveUser方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.onlySupports"</span><span class="token punctuation">,</span> <span class="token string">"Only UsernamePasswordAuthenticationToken is supported"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String username <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"NONE_PROVIDED"</span> <span class="token operator">:</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> cacheWasUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     UserDetails user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">getUserFromCache</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"User '"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hideUserNotFoundExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">throw</span> var6<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"retrieveUser returned null - a violation of the interface contract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> var7<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>postAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">putUserInCache</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     Object principalToReturn <span class="token operator">=</span> user<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>forcePrincipalAsString<span class="token punctuation">)</span> <span class="token punctuation">{</span>         principalToReturn <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createSuccessAuthentication</span><span class="token punctuation">(</span>principalToReturn<span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证身份就是加载响应的UserDetails，看看是否和用户输入的账号、密码、权限等信息匹配。此步骤由实现AuthenticationProvider的DaoAuthenticationProvider（它利用UserDetailsService验证用户名、密码和授权）处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> UserDetails <span class="token function">retrieveUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareTimingAttackProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         UserDetails loadedUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>loadedUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"UserDetailsService returned null, which is an interface contract violation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> loadedUser<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mitigateAgainstTimingAttack</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> var4<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> var5<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>这一步就是将获取到的userDetails根据用户名作密码比对<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>UserDetails userDetails<span class="token punctuation">,</span> UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication failed: no credentials provided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      String presentedPassword <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>presentedPassword<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication failed: password does not match stored value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><p>总结:</p><ul><li>class extends UsernamePasswordAuthenticationFilter,这个过滤器会拦截表单登录提交的action,它会委托认证管理器authenticationManager来验证登录</li><li>class implements UserDetailsService,重写loadUserByUsername(),查库获取用户信息</li><li>class implements AuthenticationProvider, 真正验证登录的类,authenticate()中验证登录凭证</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> spring-security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超简单的session共享</title>
      <link href="/2021/08/17/chao-jian-dan-de-session-gong-xiang/"/>
      <url>/2021/08/17/chao-jian-dan-de-session-gong-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于传统的单体服务,不存在session共享问题,但是在微服务架构下,session共享最简单的方式就是通过redis去实现,从redis中存取数据工作量还是比较大的,spring session使用spring的代理过滤器,将所有session拦截下来.自动同步到redis中</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>创建一个springboot工程,引入Web,Spring Session,Redis,pom文件如下</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Idea中启动多个端口进行访问<br><img src="/images/Idea%E5%A4%9A%E7%AB%AF%E5%8F%A3%E5%90%AF%E5%8A%A8.png" alt="这边我设置的是9091,9092俩个端口模拟集群"></p></li><li><p>nginx配置</p><pre class="line-numbers language-conf"><code class="language-conf"># 简单说明下上游服务器tyu.com负载到9091和9092这俩个端口,weight 表示服务的权重upstream tyu.com {     #ip_hash;     server 127.0.0.1:9091 weight=1;     server 127.0.0.1:9092 weight=2; }location / {         proxy_pass   http://tyu.com/;         proxy_redirect default;     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemoController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span> Integer port<span class="token punctuation">;</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/set"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">setSession</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>     session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"tyu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">getSession</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/n1.png" alt="往session塞值"><br><img src="/images/n2.png" alt="去get session的值"><br><img src="/images/n3.png" alt="去get session的值"><br>往92塞值,可以发现91,92这俩个端口都能get到值</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SSM 架构中使用 Spring Session ,要配置三个地方 ，一个是 web.xml 配置代理过滤器，然后在 Spring 容器中配置 Redis，最后再配置 Spring Session，步骤还是有些繁琐的，而 Spring Boot 中直接帮我们省去了这些繁琐的步骤！不用再去配置 Spring Session。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> spring session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延时消息</title>
      <link href="/2021/08/16/yan-shi-xiao-xi/"/>
      <url>/2021/08/16/yan-shi-xiao-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>维护调度平台,有个核心功能就是定时任务,我自己比较常用的调度框架是quartz.比如一个常见的业务场景:用户下单后指定时间未支付取消订单.</p><p>实现这类需求,常见的方式有俩种:</p><ol><li>轮询定时任务：给定周期内扫描所有未支付的订单，查看时间是否到期。</li><li>延时消息：过期自动触发,订单创建的时候发送一条 N 分钟到期的信息，一旦消息消费后便可判断订单是否可以取消。</li></ol><h2 id="quartz定时扫描"><a href="#quartz定时扫描" class="headerlink" title="quartz定时扫描"></a>quartz定时扫描</h2><p>先看第一种，这类方式实现较为简单，只需要启动一个定时任务即可；但缺点同样也很明显，这个间隔扫描的时间不好控制。</p><p>给短了会造成很多无意义的扫描，增大数据库压力，给长了又会使得误差较大。</p><p>当然最大的问题还是效率较低，随着订单增多耗时会呈线性增长，最差的情况甚至会出现上一波轮询还没有扫描完，下一波调度又来了。</p><p>这个问题在quartz里我是这么解决的<br>首先介绍下,在分布式定时任务中（或者集群），quartz默认采取乐观锁,允许多个线程同时拉取同一个trigger。能够保证同一时刻只会有一个定时任务运行。在Job的实现类上加这个注解@DisallowConcurrentExecution,它可以禁止并发执行多个相同定义的JobDetail,也就是上一个任务没有同时执行完,下个任务不会执行.这样就很大程度上避免了重复处理相同数据.<br>但其实还是有个明显的问题,比如说,业务执行到一半发生了异常,这个定时任务会一直未执行结束,不可能后面的任务一直在等,我们可以用Future这个接口,它提供了检查计算是否完成等方法.在指定时间内没有完成计算，则会抛出TimeoutException.这个时候我们可以处理这部分异常数据了.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"------------MessageSendJob,发送定时任务开始------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future <span class="token operator">=</span> threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                    <span class="token punctuation">{</span>                        <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//记录日志</span>        <span class="token punctuation">}</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"------------MessageSendJob,发送定时任务结束------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但总归定时任务定时扫描会造成很多不必要的扫描,这时第二种方案就要显得靠谱多了，实时性也比较高。</p><h2 id="过期自动触发"><a href="#过期自动触发" class="headerlink" title="过期自动触发"></a>过期自动触发</h2><ol><li><p>使用 DelayQueue, 只需要有一个线程不断从队列中获取数据即可，它的优点是不用引入第三方依赖，实现也很简单，缺点也很明显，它是内存存储，对分布式支持不友好，如果发生单点故障，可能会造成数据丢失，无界队列还存在 OOM 的风险。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> DelayQueue delayQueue  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             delayQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyDelayedTask</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Delayed take <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>take<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用Redis键通知,默认情况下 Redis 服务器端是不开启键过期通知的，需要我们通过 config set notify-keyspace-events Ex 的命令手动开启，开启键过期通知后，我们就可以拿到每个键值过期的事件，利用这个机制实现了给每个key开启一个定时任务的功能。使用 Redis 可以将数据持久化到磁盘，规避了数据丢失的风险，并且支持分布式，避免了单点故障。并且它能监听集群，可以建立多个redis连接，分别对每个redis的key过期进行监听。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 配置 RedisListenerConfig 实现监听 Redis key 过期时间*/</span> <span class="token annotation punctuation">@Bean</span> RedisMessageListenerContainer <span class="token function">container1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> RedisMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     JedisConnectionFactory jedisConnectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPoolConfig</span><span class="token punctuation">(</span><span class="token function">jedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>jedisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> container<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**   * 针对 redis 数据失效事件，进行数据处理  * @param message  * @param pattern  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>     String key <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取到失效的 key</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"product_check"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"监听过期key成功,key => {}"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>         String productId <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         String orderId <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         TOrder order <span class="token operator">=</span> TOrder<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">productId</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderStatus</span><span class="token punctuation">(</span>CommonConstants<span class="token punctuation">.</span>OrderStatus<span class="token punctuation">.</span>RELEASE_PAY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>kafka时间轮，实现难度大，内存消耗大<br>时间轮其实本质上它就是一个指定长度的环形数组,每个任务会依据时间占一个格子,同时需要记录它所对应的圈数,不然同一个格子上会有重复的延时消息,并且我们取出的时候需要判断圈数是否为0,如果不为0,圈数得减1.这样就可避免轮询所有的任务，不过如果时间轮的槽比较少，导致某一个槽上的任务非常多那效率也比较低，这就和 HashMap 的 hash 冲突是一样的。</p></li><li><p>订单过期不删除，查询订单，对过期时间作校验，如果过期则删除，缺点如果一直不访问订单，则库存一直无法回滚</p></li><li><p>redis实现延迟队列</p></li></ol><ul><li>向job池put一个元数据,状态是不可消费</li><li>以jobId作为value，delayTime作为score 存到多个bucket延迟桶 中,提高扫描速度，降低消息延迟.</li><li>多线程扫描归属bucket 中的最接近当前时间的延迟数据,如果当前时间超过延迟时间,区分是超时重试任务还是延迟任务,如果是超时任务,判断是否超过最大重试次数,如果超过就删除延迟桶中的数据,同时将元数据置为搁置状态,以便问题追踪.如果没有,就跟延迟任务一样处理,将元数据置为待消费状态,搬运桶中数据到准备队列.删除延迟桶中数据</li><li>消费端消费准备队列数据,将元数据置为已消费状态,同时设定TTR,重新计算延迟时间,放入延迟桶.处理完成后,删除元数据,并且要删除延迟桶中ttr的数据,防止消息延迟重复消息的产生</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>延时任务实现的方式还是很多的,如果有现成的组件直接用就可以了,比如rocketmq,它自带处理延时消息的功能。如果不行,结合自己业务,技术栈,选择合适的方式.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 延时消息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quartz </tag>
            
            <tag> redis </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次使用fastjson拷贝对象的bug</title>
      <link href="/2021/08/09/dui-xiang-kao-bei-ceng-ji-bug/"/>
      <url>/2021/08/09/dui-xiang-kao-bei-ceng-ji-bug/</url>
      
        <content type="html"><![CDATA[<p>执行下面这行代码</p><pre class="line-numbers language-java"><code class="language-java">ModelVo modelVo <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">,</span> ModelVo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错<br><code>fastjson  java.lang.IllegalArgumentException: argument type mismatch</code></p><p><em>原因就是内部类的层次不够。以下面的例子举例</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelVo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Data data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Row<span class="token operator">></span> rows<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Row</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该改成这样</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelVo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Data data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Row<span class="token operator">></span> rows<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Row</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据汇总按日分组统计</title>
      <link href="/2019/10/10/an-ri-fen-zu-wu-shu-ju-bu-0/"/>
      <url>/2019/10/10/an-ri-fen-zu-wu-shu-ju-bu-0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有个需求需要按日期分组（group by）统计，没有数据补0<br>之前做过类似的需求,那时候因为数据量比较大,业务也想对复杂,是通过定时任务统计前一天的数据到汇总表.然后查询的时候直接从汇总表去查就很easy了<br>这次因为业务比较简单,不想增加代码量,还需要建表,去写个定时任务,使简单的问题复杂化.我需要一张日期表，但我又不想建表。可以union all日期生成一张临时表然后左外连接你需要查询的数据表。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>打个比方你想查一个最近7天的数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>click_date<span class="token punctuation">,</span> ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>count1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count1<span class="token keyword">from</span> <span class="token punctuation">(</span>         <span class="token keyword">SELECT</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">1</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">2</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">3</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">4</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">5</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">6</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date<span class="token punctuation">)</span> <span class="token number">a</span>         <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">date</span><span class="token punctuation">(</span>alarmtime<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count1                    <span class="token keyword">from</span> error                    <span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">date</span><span class="token punctuation">(</span>alarmtime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>click_date <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span><span class="token keyword">datetime</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果查询条件复杂一些，比如说我想知道<strong>开始时间-结束时间</strong>的数据，这就不像7天，30天这样可以直接写在sql里了，而且如果我想知道一年，你也不可能一直在后面追加一年的日期<br>不过思路是对的，只不过这张日期表我们可以通过代码去拼接sql，通过mybatis的$字符串拼接,这样不管再长的间隔也不需要我们手动拼接了。</p><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//拿到指定开始时间-结束时间所有的日期</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> dateBetweenDays <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">getDateBetweenDays</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span>endDate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历日期拼接到sql里</span>StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT '%s' as timeDay union all "</span><span class="token punctuation">,</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT '%s' as timeDay"</span><span class="token punctuation">,</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"activityId"</span><span class="token punctuation">,</span> activityStaticReq<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">></span> shareResult <span class="token operator">=</span> tfAccShareRecordMapper<span class="token punctuation">.</span><span class="token function">querShare</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//最后在xml里拼接sql</span><span class="token keyword">select</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>timeDay<span class="token punctuation">,</span><span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> time<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>shareNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> shareNum<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>shareCount<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> shareCount<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>newUserNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> newUserNum    <span class="token keyword">from</span> <span class="token punctuation">(</span>${<span class="token keyword">table</span>}<span class="token punctuation">)</span> <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> DATE_FORMAT<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> dayTime<span class="token punctuation">,</span>                    <span class="token function">count</span><span class="token punctuation">(</span>account_id<span class="token punctuation">)</span>                    shareNum<span class="token punctuation">,</span>                    <span class="token function">sum</span><span class="token punctuation">(</span>share_record_count<span class="token punctuation">)</span>         shareCount<span class="token punctuation">,</span>                    <span class="token function">sum</span><span class="token punctuation">(</span>is_new_user<span class="token punctuation">)</span>                     newUserNum                    <span class="token keyword">from</span> tf_acc_share_record o                    <span class="token keyword">where</span> o<span class="token punctuation">.</span>activity_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{activityId}</span>                    <span class="token keyword">group</span> <span class="token keyword">by</span> DATE_FORMAT<span class="token punctuation">(</span>o<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">on</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>timeDay<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>dayTime <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>timeDay            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>没有一劳永逸的方案,持续尝试,才能写出更好的代码</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 业务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法的参数传递机制</title>
      <link href="/2019/10/03/fang-fa-de-can-shu-chuan-di-ji-zhi/"/>
      <url>/2019/10/03/fang-fa-de-can-shu-chuan-di-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>今天有个同事问了我一个基础问题,虽然比较基础,但平常写业务代码,有时候不注意往往会忽略这些小细节.<br> <img src="/images/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92q.png" alt="他问我b为什么显示没用到,原理是啥"><br> 回答这个问题之前我们需要明白形参和实参在传递不同数据类型时的区别</p><ul><li><p>形参和实参</p><ul><li><p>形参是基本数据类型，传递数据值</p></li><li><p>形参是引用数据类型，传递地址值，String、包装类等对象不可变<br>下面是我写的测试demo,大家就能看出区别了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testParamTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  User a <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User c <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  String s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>  <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>User a<span class="token punctuation">,</span> User b<span class="token punctuation">,</span> User c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  b <span class="token operator">=</span> a<span class="token punctuation">;</span>  b<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出<span class="token operator">:</span><span class="token comment" spellcheck="true">//a->User(phone=null, name=null, age=12)</span><span class="token comment" spellcheck="true">//b->User(phone=null, name=null, age=null)</span><span class="token comment" spellcheck="true">//c->User(phone=null, name=null, age=18)</span><span class="token comment" spellcheck="true">//d->0</span><span class="token comment" spellcheck="true">//e->123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>注:还有个需要注意的地方如果是不同的jvm,比如rpc调用还是值传递,并非引用传递.这个坑我自己踩过.😔</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
