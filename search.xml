<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shardsphere分表</title>
      <link href="/2022/02/19/shardsphere-fen-biao/"/>
      <url>/2022/02/19/shardsphere-fen-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ShardSphere-简介"><a href="#1-ShardSphere-简介" class="headerlink" title="1 ShardSphere 简介"></a>1 ShardSphere 简介</h1><blockquote><p>Sharding-Sphere是一套开源的分布式数据库中间件,是Apache的顶级项目,支持数据分片、读写分离，同时兼容多种数据库，通过可插拔架构，理想情况下，可以做到对业务代码无感知。<br>ShardingSphere下有两款成熟的产品：sharding jdbc和sharding proxy。</p></blockquote><h1 id="2-背景"><a href="#2-背景" class="headerlink" title="2 背景"></a>2 背景</h1><blockquote><p>系统上线后发现埋点表和接口日志表2天的数据量就已经300万的数据了,单表数据量太大且持续增长,查询操作非常耗时,决定使用分表中间件：ShardingSphere。</p></blockquote><h1 id="3-需求"><a href="#3-需求" class="headerlink" title="3 需求"></a>3 需求</h1><ul><li>集成多数据源</li><li>分表可配置分片周期</li><li>动态建表</li><li>支持分片表变更表结构</li></ul><h1 id="4-实现方式"><a href="#4-实现方式" class="headerlink" title="4 实现方式"></a>4 实现方式</h1><ul><li>使用dynamic-datasource-spring-boot-starter组件集成多数据源,将不参与分表的数据源独立于Shardsphere之外,<strong>对分表的SQL使用sharding jdbc数据源，对不涉及到分表的SQL，使用普通数据源。</strong></li><li>使用标准分片策略对日期精准分片 ,对于范围日期条件,支持范围分片查询</li><li>项目初始化缓存所有分片表名,对于分片表名,如果缓存匹配不上,需要新建分片表</li><li>可在 td_activity_param 表配置分片表原始表结构,后台执行建表语句</li></ul><h2 id="集成-sharding-jdbc"><a href="#集成-sharding-jdbc" class="headerlink" title="集成 sharding jdbc"></a>集成 sharding jdbc</h2><ul><li>引入依赖<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shard </category>
          
          <category> multi source </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shard-jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用策略模式优化条件判断</title>
      <link href="/2021/08/23/li-yong-ce-lue-mo-shi-you-hua-tiao-jian-pan-duan/"/>
      <url>/2021/08/23/li-yong-ce-lue-mo-shi-you-hua-tiao-jian-pan-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>利用策略模式优化过多 if else 代码<br>当业务场景比较复杂,如果if..else过多逻辑会很混乱,后期维护也比较头大,写着写着就会漏掉一些东西<br>我们的业务场景有各种各样的活动组件,每个活动用户参与后可能会给用户发送一些短信或者微信模板消息,但是数据封装,目标客群可能不太一样,我们要是想统一处理.肯定会有很多if..else区分场景</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>通知类型,这边用map去封装</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> NotifyEnum <span class="token punctuation">{</span> <span class="token function">CUTPRICE_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"cutPrice"</span><span class="token punctuation">,</span><span class="token string">"砍价成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"cutPriceSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SECKILL_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"secKill"</span><span class="token punctuation">,</span><span class="token string">"秒杀成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"secKillSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GROUP_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span><span class="token string">"拼团成功异步通知准备参数方法"</span><span class="token punctuation">,</span><span class="token string">"groupSuccessNotifyServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>NotifyEnum<span class="token operator">></span> notifyMap <span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token punctuation">{</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>NotifyEnum<span class="token operator">></span> tempMap  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cutPrice"</span><span class="token punctuation">,</span>CUTPRICE_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"secKill"</span><span class="token punctuation">,</span>SECKILL_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     tempMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">,</span>GROUP_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>     notifyMap <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>tempMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/** 枚举值码 */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String commandType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** 枚举描述 */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String desc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 实现类  */</span> <span class="token keyword">private</span> <span class="token keyword">final</span> String clazz <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 得到枚举值码。  * @return 枚举值码。  */</span> <span class="token keyword">public</span> String <span class="token function">getCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> commandType<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 得到枚举描述。  * @return 枚举描述。  */</span> <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> desc<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 获取 class。  * @return class。  */</span> <span class="token keyword">public</span> String <span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> clazz<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 构建一个 。  * @param commandType 枚举值码。  * @param desc 枚举描述。  */</span>  <span class="token function">NotifyEnum</span><span class="token punctuation">(</span>String commandType<span class="token punctuation">,</span> String desc<span class="token punctuation">,</span> String clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>commandType <span class="token operator">=</span> commandType<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz <span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> NotifyEnum <span class="token function">buildFromNotifyType</span><span class="token punctuation">(</span>String notifyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>notifyType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> notifyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>notifyType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个异步通知接口,这里面定义了一些抽象方法，交给具体的业务实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/**  * 发送异步消息前置处理  * @param param  * @return  */</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知真正实现接口  * @param param 入参  */</span> <span class="token keyword">void</span> <span class="token function">dealNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是异步通知接口的抽象类.因为数据装载已经在各个实现类准备好了,所以发送消息这部分业务,就可以抽出来公用了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractNotifyService</span> <span class="token keyword">implements</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>AbstractNotifyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知前置参数处理方法  * @param param  * @return  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知真正实现接口  * @param param 入参  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dealNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"真正开始进行异步通知处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//装载数据</span>     Object message <span class="token operator">=</span> <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//处理message</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是异步通知接口的其中一个实现,在里面我们可以具体beforeSendNotice这个方法；这些实现类都会注册到 Spring Bean 容器中供之后使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CutPriceSuccessNotifyServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNotifyService</span> <span class="token keyword">implements</span> <span class="token class-name">INotifyService</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CutPriceSuccessNotifyServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 异步通知前置参数处理方法  * 主要目的是准备要发送的参数以及要给哪些人发送  * @param param  * @return  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Object <span class="token function">beforeSendNotice</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始进行处理砍价成功异步通知 前置处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> null<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是一个异步通知工厂类,根据通知类型,获取通知api</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyServiceFactory</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> INotifyService<span class="token operator">></span> notifyServiceMap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 获取通知对象  * @param notifyEnum  * @return  */</span> <span class="token keyword">public</span> INotifyService <span class="token function">getNotifyService</span><span class="token punctuation">(</span>NotifyEnum notifyEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>     INotifyService notifyService <span class="token operator">=</span> notifyServiceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>notifyEnum<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> notifyService<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试一下是否返回正确的通知api</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"异步通知"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"获取异步通知"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getNotifyService/{commandType}"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getNotifyService</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"commandType"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>String commandType<span class="token punctuation">)</span><span class="token punctuation">{</span>     INotifyService notifyService <span class="token operator">=</span> notifyServiceFactory<span class="token punctuation">.</span><span class="token function">getNotifyService</span><span class="token punctuation">(</span>NotifyEnum<span class="token punctuation">.</span><span class="token function">buildFromNotifyType</span><span class="token punctuation">(</span>commandType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>notifyService<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了让类的职责更加单一、代码更加清晰。这里运用了工厂模式，虽然代码量增加了，但是后期维护拓展会很方便，比较符合开闭原则。当然还有种思路，在枚举里维护api class和类型的关系。根据class对象获取容器对象</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>过滤器和拦截器的区别</title>
      <link href="/2021/08/23/guo-lu-qi-he-lan-jie-qi-de-qu-bie/"/>
      <url>/2021/08/23/guo-lu-qi-he-lan-jie-qi-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p>过滤器和拦截器的区别:</p><ol><li>过滤器 是基于函数回调的，拦截器 则是基于Java的反射机制（动态代理）实现的</li><li>过滤器 依赖Tomcat等容器,而拦截器(Interceptor) 它是一个Spring组件，并由Spring容器管理,是可以单独使用,获取IOC容器中的各个bean</li><li>过滤器Filter是在请求进入容器后，但在进入servlet之前进行预处理，请求结束是在servlet处理完以后。拦截器 Interceptor 是在请求进入servlet后，在进入Controller之前进行预处理的，Controller 中渲染了对应的视图之后请求结束。</li><li>过滤器几乎可以对所有进入容器的请求起作用，而拦截器只会对Controller中请求或访问static目录下的资源请求起作用。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>session和nosession系统</title>
      <link href="/2021/08/20/session-he-nosession-xi-tong/"/>
      <url>/2021/08/20/session-he-nosession-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="Sessio系统"><a href="#Sessio系统" class="headerlink" title="Sessio系统"></a>Sessio系统</h2><p>验证流程:</p><ul><li>当客户端A第一次发送请求后，nginx将这个请求分发给服务器1 </li><li>然后将服务器1 产生的Session 放入Redis中，此时客户端A、服务器1 和Redis中都会有一个相同的Session</li><li>当客户端A发送第二次请求的时候，nginx将请求分发给服务器2 （已知服务器2 中无Session）</li><li>因为客户端自己携带了一个Session，那么服务器2 就可以拿着客户端带来的Session中的ID去Redis中找到Session，找到这个Session后，就能正常执行之后的操作。</li></ul><p>认证缺点:</p><ul><li><p>对服务器的压力大：因为每个用户经过服务器认证之后，服务器都要做一次记录，通常这些记录都是保存在内存中，而随着认证用户的增多，服务器开销会明显增大。</p></li><li><p>程序扩展性变差：用户认证后，服务器做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须在这台服务器上才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力，也就意味着限制了扩展的能力。</p></li><li><p>安全性偏低：因为是基于cookie来进行用户识别的，cookie如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。</p></li></ul><h2 id="no-session系统"><a href="#no-session系统" class="headerlink" title="no session系统"></a>no session系统</h2><p>Token 验证流程：<br>当接收方接收到一个JWT的时候，首先要对这个JWT的完整性进行验证，这个就是签名认证。它验证的方法其实很简单，只要把header做base64url解码，就能知道JWT用的什么算法做的签名，然后用这个算法，再次用同样的逻辑对header和payload做一次签名，并比较这个签名是否与JWT本身包含的第三个部分的串是否完全相同，只要不同，就可以认为这个JWT是一个被篡改过的串，自然就属于验证失败了。接收方生成签名的时候必须使用跟JWT发送方相同的密钥，意味着要做好密钥的安全传递或共享</p><p>token+redis： 是自己生成个32位的key，value为用户和token信息，访问时解析token拿到用户标识,判断redis里是否有该用户信息.如果有，比对用户token，验证成功加载该用户信息完成登录。服务需要存储下发的每个用户对应的token及身份信息，维持其过期时间，好处是随时可以删除某个token，阻断该token继续使用.缺点：每次都要进行redis查询。占用redis存储空间。</p><p>JWT 验证流程：</p><ul><li>在头部信息中声明加密算法和常量， 然后把header使用json转化为字符串</li><li>在载荷中声明用户信息，同时还有一些其他的内容；再次使用json 把载荷部分进行转化，转化为字符串</li><li>使用在header中声明的加密算法和每个项目随机生成的secret来进行加密， 把第一步分字符串和第二部分的字符串进行加密， 生成新的字符串。字符串是独一无二的。</li><li>解密的时候，只要客户端带着JWT来发起请求，服务端就直接使用secret进行解密。</li></ul><p>JWT: 生成并发给客户端之后，后台是不用存储，客户端访问时会验证其签名、过期时间等再取出里面的信息（如username），再使用该信息直接查询用户信息完成登录验证。jwt自带签名、过期等校验，后台不用存储，缺陷是一旦下发，服务后台无法拒绝携带该jwt的请求（如踢除用户）；</p><p>token和jwt的区别:<br>服务端验证客户端发来的token信息要进行数据的查询操作；JWT验证客户端发来的token信息就不用， 在服务端使用密钥校验就可以，不用数据库的查询。</p><p>access_token和refresh_token双令牌无感知登录:<br>access_token<br>由后端颁发给前台,一般采用对称加密算法,可以反向解析出参数信息,如:用户ID,失效时间等<br>refresh_token<br>它的作用就是避免让用户重复输入账号密码登录再次验证<br>使用<br>一般我们可以将access_token的过期时间设置为2小时的，refresh_token的过期时间设置为1个月，然后用户第一次进来，用了一段时间access_token过期了，过期后前端携带refresh_token去获取新的access_token，返回的新的access_token依旧是2小时，那么除此之外，refresh_token自身再刷新一次，刷新一次后他还是1个月的过期时间(不累加)，这就保证了用户在一个月内只要访问了应用，就可以享受无感知的体验.<br>为什么不直接把accesstoken设长一店<br>access_token 泄露概率比较大,毕竟每次api请求都附带它,如果单独把 access_token 过期时间设置过长,一旦泄露,就相当于密码泄露<br>refresh_token 泄露概率比较小,只有每次access_token 失效时才会使用它,所以二者组合可以很好的避免token泄露带来的安全风险,同时又能保证用户体验</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springSecurity源码学习</title>
      <link href="/2021/08/18/springsecurity/"/>
      <url>/2021/08/18/springsecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用springboot+springSecurity+jwt实现基于token的权限管理</p><h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><ol><li><p>UsernamePasswordAuthenticationFilter过滤器获取用户登录的信息,调用authenticationManager.authenticate()进行身份验证</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Authentication <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                             HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 从输入流中获取到登录的信息</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         LoginUser loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LoginUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         rememberMe<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getRememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> loginUser<span class="token punctuation">.</span><span class="token function">getRememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>                 <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ProviderManager是authenticationManager的一个默认实现,委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证,调用retrieveUser方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.onlySupports"</span><span class="token punctuation">,</span> <span class="token string">"Only UsernamePasswordAuthenticationToken is supported"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String username <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"NONE_PROVIDED"</span> <span class="token operator">:</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> cacheWasUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     UserDetails user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">getUserFromCache</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"User '"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hideUserNotFoundExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">throw</span> var6<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"retrieveUser returned null - a violation of the interface contract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> var7<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>postAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">putUserInCache</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     Object principalToReturn <span class="token operator">=</span> user<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>forcePrincipalAsString<span class="token punctuation">)</span> <span class="token punctuation">{</span>         principalToReturn <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createSuccessAuthentication</span><span class="token punctuation">(</span>principalToReturn<span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证身份就是加载响应的UserDetails，看看是否和用户输入的账号、密码、权限等信息匹配。此步骤由实现AuthenticationProvider的DaoAuthenticationProvider（它利用UserDetailsService验证用户名、密码和授权）处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> UserDetails <span class="token function">retrieveUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareTimingAttackProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         UserDetails loadedUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>loadedUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span><span class="token string">"UserDetailsService returned null, which is an interface contract violation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> loadedUser<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">mitigateAgainstTimingAttack</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> var4<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> var5<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>这一步就是将获取到的userDetails根据用户名作密码比对<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>UserDetails userDetails<span class="token punctuation">,</span> UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication failed: no credentials provided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      String presentedPassword <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>presentedPassword<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication failed: password does not match stored value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span> <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><p>总结:</p><ul><li>class extends UsernamePasswordAuthenticationFilter,这个过滤器会拦截表单登录提交的action,它会委托认证管理器authenticationManager来验证登录</li><li>class implements UserDetailsService,重写loadUserByUsername(),查库获取用户信息</li><li>class implements AuthenticationProvider, 真正验证登录的类,authenticate()中验证登录凭证</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> spring-security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超简单的session共享</title>
      <link href="/2021/08/17/chao-jian-dan-de-session-gong-xiang/"/>
      <url>/2021/08/17/chao-jian-dan-de-session-gong-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于传统的单体服务,不存在session共享问题,但是在微服务架构下,session共享最简单的方式就是通过redis去实现,从redis中存取数据工作量还是比较大的,spring session使用spring的代理过滤器,将所有session拦截下来.自动同步到redis中</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>创建一个springboot工程,引入Web,Spring Session,Redis,pom文件如下</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Idea中启动多个端口进行访问<br><img src="/images/Idea%E5%A4%9A%E7%AB%AF%E5%8F%A3%E5%90%AF%E5%8A%A8.png" alt="这边我设置的是9091,9092俩个端口模拟集群"></p></li><li><p>nginx配置</p><pre class="line-numbers language-conf"><code class="language-conf"># 简单说明下上游服务器tyu.com负载到9091和9092这俩个端口,weight 表示服务的权重upstream tyu.com {     #ip_hash;     server 127.0.0.1:9091 weight=1;     server 127.0.0.1:9092 weight=2; }location / {         proxy_pass   http://tyu.com/;         proxy_redirect default;     }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionDemoController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span> Integer port<span class="token punctuation">;</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/set"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">setSession</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>     session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"tyu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">getSession</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/n1.png" alt="往session塞值"><br><img src="/images/n2.png" alt="去get session的值"><br><img src="/images/n3.png" alt="去get session的值"><br>往92塞值,可以发现91,92这俩个端口都能get到值</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SSM 架构中使用 Spring Session ,要配置三个地方 ，一个是 web.xml 配置代理过滤器，然后在 Spring 容器中配置 Redis，最后再配置 Spring Session，步骤还是有些繁琐的，而 Spring Boot 中直接帮我们省去了这些繁琐的步骤！不用再去配置 Spring Session。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> spring session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延时消息</title>
      <link href="/2021/08/16/yan-shi-xiao-xi/"/>
      <url>/2021/08/16/yan-shi-xiao-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>维护调度平台,有个核心功能就是定时任务,我自己比较常用的调度框架是quartz.比如一个常见的业务场景:用户下单后指定时间未支付取消订单.</p><p>实现这类需求,常见的方式有俩种:</p><ol><li>轮询定时任务：给定周期内扫描所有未支付的订单，查看时间是否到期。</li><li>延时消息：过期自动触发,订单创建的时候发送一条 N 分钟到期的信息，一旦消息消费后便可判断订单是否可以取消。</li></ol><h2 id="quartz定时扫描"><a href="#quartz定时扫描" class="headerlink" title="quartz定时扫描"></a>quartz定时扫描</h2><p>先看第一种，这类方式实现较为简单，只需要启动一个定时任务即可；但缺点同样也很明显，这个间隔扫描的时间不好控制。</p><p>给短了会造成很多无意义的扫描，增大数据库压力，给长了又会使得误差较大。</p><p>当然最大的问题还是效率较低，随着订单增多耗时会呈线性增长，最差的情况甚至会出现上一波轮询还没有扫描完，下一波调度又来了。</p><p>这个问题在quartz里我是这么解决的<br>首先介绍下,在分布式定时任务中（或者集群），quartz默认采取乐观锁,允许多个线程同时拉取同一个trigger。能够保证同一时刻只会有一个定时任务运行。在Job的实现类上加这个注解@DisallowConcurrentExecution,它可以禁止并发执行多个相同定义的JobDetail,也就是上一个任务没有同时执行完,下个任务不会执行.这样就很大程度上避免了重复处理相同数据.<br>但其实还是有个明显的问题,比如说,业务执行到一半发生了异常,这个定时任务会一直未执行结束,不可能后面的任务一直在等,我们可以用Future这个接口,它提供了检查计算是否完成等方法.在指定时间内没有完成计算，则会抛出TimeoutException.这个时候我们可以处理这部分异常数据了.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"------------MessageSendJob,发送定时任务开始------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future <span class="token operator">=</span> threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                    <span class="token punctuation">{</span>                        <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//记录日志</span>        <span class="token punctuation">}</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"------------MessageSendJob,发送定时任务结束------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但总归定时任务定时扫描会造成很多不必要的扫描,这时第二种方案就要显得靠谱多了，实时性也比较高。</p><h2 id="过期自动触发"><a href="#过期自动触发" class="headerlink" title="过期自动触发"></a>过期自动触发</h2><ol><li><p>使用 DelayQueue, 只需要有一个线程不断从队列中获取数据即可，它的优点是不用引入第三方依赖，实现也很简单，缺点也很明显，它是内存存储，对分布式支持不友好，如果发生单点故障，可能会造成数据丢失，无界队列还存在 OOM 的风险。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> DelayQueue delayQueue  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             delayQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyDelayedTask</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Delayed take <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>take<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用Redis键通知,默认情况下 Redis 服务器端是不开启键过期通知的，需要我们通过 config set notify-keyspace-events Ex 的命令手动开启，开启键过期通知后，我们就可以拿到每个键值过期的事件，利用这个机制实现了给每个key开启一个定时任务的功能。使用 Redis 可以将数据持久化到磁盘，规避了数据丢失的风险，并且支持分布式，避免了单点故障。并且它能监听集群，可以建立多个redis连接，分别对每个redis的key过期进行监听。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 配置 RedisListenerConfig 实现监听 Redis key 过期时间*/</span> <span class="token annotation punctuation">@Bean</span> RedisMessageListenerContainer <span class="token function">container1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> RedisMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     JedisConnectionFactory jedisConnectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">setPoolConfig</span><span class="token punctuation">(</span><span class="token function">jedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     jedisConnectionFactory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>jedisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> container<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**   * 针对 redis 数据失效事件，进行数据处理  * @param message  * @param pattern  */</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>     String key <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取到失效的 key</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"product_check"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"监听过期key成功,key => {}"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>         String productId <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         String orderId <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         TOrder order <span class="token operator">=</span> TOrder<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">productId</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderStatus</span><span class="token punctuation">(</span>CommonConstants<span class="token punctuation">.</span>OrderStatus<span class="token punctuation">.</span>RELEASE_PAY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>kafka时间轮，实现难度大，内存消耗大<br>时间轮其实本质上它就是一个指定长度的环形数组,每个任务会依据时间占一个格子,同时需要记录它所对应的圈数,不然同一个格子上会有重复的延时消息,并且我们取出的时候需要判断圈数是否为0,如果不为0,圈数得减1.这样就可避免轮询所有的任务，不过如果时间轮的槽比较少，导致某一个槽上的任务非常多那效率也比较低，这就和 HashMap 的 hash 冲突是一样的。</p></li><li><p>订单过期不删除，查询订单，对过期时间作校验，如果过期则删除，缺点如果一直不访问订单，则库存一直无法回滚</p></li><li><p>redis实现延迟队列</p></li></ol><ul><li>向job池put一个元数据,状态是不可消费</li><li>以jobId作为value，delayTime作为score 存到多个bucket延迟桶 中,提高扫描速度，降低消息延迟.</li><li>多线程扫描归属bucket 中的最接近当前时间的延迟数据,如果当前时间超过延迟时间,区分是超时重试任务还是延迟任务,如果是超时任务,判断是否超过最大重试次数,如果超过就删除延迟桶中的数据,同时将元数据置为搁置状态,以便问题追踪.如果没有,就跟延迟任务一样处理,将元数据置为待消费状态,搬运桶中数据到准备队列.删除延迟桶中数据</li><li>消费端消费准备队列数据,将元数据置为已消费状态,同时设定TTR,重新计算延迟时间,放入延迟桶.处理完成后,删除元数据,并且要删除延迟桶中ttr的数据,防止消息延迟重复消息的产生</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>延时任务实现的方式还是很多的,如果有现成的组件直接用就可以了,比如rocketmq,它自带处理延时消息的功能。如果不行,结合自己业务,技术栈,选择合适的方式.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 延时消息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quartz </tag>
            
            <tag> redis </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次使用fastjson拷贝对象的bug</title>
      <link href="/2021/08/09/dui-xiang-kao-bei-ceng-ji-bug/"/>
      <url>/2021/08/09/dui-xiang-kao-bei-ceng-ji-bug/</url>
      
        <content type="html"><![CDATA[<p>执行下面这行代码</p><pre class="line-numbers language-java"><code class="language-java">ModelVo modelVo <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">,</span> ModelVo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错<br><code>fastjson  java.lang.IllegalArgumentException: argument type mismatch</code></p><p><em>原因就是内部类的层次不够。以下面的例子举例</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelVo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Data data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Row<span class="token operator">></span> rows<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Row</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该改成这样</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelVo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Data data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Row<span class="token operator">></span> rows<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Row</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据汇总按日分组统计</title>
      <link href="/2019/10/10/an-ri-fen-zu-wu-shu-ju-bu-0/"/>
      <url>/2019/10/10/an-ri-fen-zu-wu-shu-ju-bu-0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有个需求需要按日期分组（group by）统计，没有数据补0<br>之前做过类似的需求,那时候因为数据量比较大,业务也想对复杂,是通过定时任务统计前一天的数据到汇总表.然后查询的时候直接从汇总表去查就很easy了<br>这次因为业务比较简单,不想增加代码量,还需要建表,去写个定时任务,使简单的问题复杂化.我需要一张日期表，但我又不想建表。可以union all日期生成一张临时表然后左外连接你需要查询的数据表。</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>打个比方你想查一个最近7天的数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>click_date<span class="token punctuation">,</span> ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>count1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count1<span class="token keyword">from</span> <span class="token punctuation">(</span>         <span class="token keyword">SELECT</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">1</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">2</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">3</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">4</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">5</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date         <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">SELECT</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interval <span class="token number">6</span> day<span class="token punctuation">)</span> <span class="token keyword">as</span> click_date<span class="token punctuation">)</span> <span class="token number">a</span>         <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">date</span><span class="token punctuation">(</span>alarmtime<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count1                    <span class="token keyword">from</span> error                    <span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">date</span><span class="token punctuation">(</span>alarmtime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>click_date <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span><span class="token keyword">datetime</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果查询条件复杂一些，比如说我想知道<strong>开始时间-结束时间</strong>的数据，这就不像7天，30天这样可以直接写在sql里了，而且如果我想知道一年，你也不可能一直在后面追加一年的日期<br>不过思路是对的，只不过这张日期表我们可以通过代码去拼接sql，通过mybatis的$字符串拼接,这样不管再长的间隔也不需要我们手动拼接了。</p><h3 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//拿到指定开始时间-结束时间所有的日期</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> dateBetweenDays <span class="token operator">=</span> DateUtil<span class="token punctuation">.</span><span class="token function">getDateBetweenDays</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span>endDate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历日期拼接到sql里</span>StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT '%s' as timeDay union all "</span><span class="token punctuation">,</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SELECT '%s' as timeDay"</span><span class="token punctuation">,</span> dateBetweenDays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"activityId"</span><span class="token punctuation">,</span> activityStaticReq<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Map<span class="token operator">></span> shareResult <span class="token operator">=</span> tfAccShareRecordMapper<span class="token punctuation">.</span><span class="token function">querShare</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//最后在xml里拼接sql</span><span class="token keyword">select</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>timeDay<span class="token punctuation">,</span><span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> time<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>shareNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> shareNum<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>shareCount<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> shareCount<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>newUserNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> newUserNum    <span class="token keyword">from</span> <span class="token punctuation">(</span>${<span class="token keyword">table</span>}<span class="token punctuation">)</span> <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> DATE_FORMAT<span class="token punctuation">(</span>create_time<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> dayTime<span class="token punctuation">,</span>                    <span class="token function">count</span><span class="token punctuation">(</span>account_id<span class="token punctuation">)</span>                    shareNum<span class="token punctuation">,</span>                    <span class="token function">sum</span><span class="token punctuation">(</span>share_record_count<span class="token punctuation">)</span>         shareCount<span class="token punctuation">,</span>                    <span class="token function">sum</span><span class="token punctuation">(</span>is_new_user<span class="token punctuation">)</span>                     newUserNum                    <span class="token keyword">from</span> tf_acc_share_record o                    <span class="token keyword">where</span> o<span class="token punctuation">.</span>activity_id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{activityId}</span>                    <span class="token keyword">group</span> <span class="token keyword">by</span> DATE_FORMAT<span class="token punctuation">(</span>o<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token number">b</span> <span class="token keyword">on</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>timeDay<span class="token punctuation">,</span> <span class="token string">'%Y/%m/%d'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>dayTime <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>timeDay            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>没有一劳永逸的方案,持续尝试,才能写出更好的代码</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 业务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法的参数传递机制</title>
      <link href="/2019/10/03/fang-fa-de-can-shu-chuan-di-ji-zhi/"/>
      <url>/2019/10/03/fang-fa-de-can-shu-chuan-di-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p>今天有个同事问了我一个基础问题,虽然比较基础,但平常写业务代码,有时候不注意往往会忽略这些小细节.<br> <img src="/images/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92q.png" alt="他问我b为什么显示没用到,原理是啥"><br> 回答这个问题之前我们需要明白形参和实参在传递不同数据类型时的区别</p><ul><li><p>形参和实参</p><ul><li><p>形参是基本数据类型，传递数据值</p></li><li><p>形参是引用数据类型，传递地址值，String、包装类等对象不可变<br>下面是我写的测试demo,大家就能看出区别了</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testParamTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  User a <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  User c <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  String s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>  <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>User a<span class="token punctuation">,</span> User b<span class="token punctuation">,</span> User c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  b <span class="token operator">=</span> a<span class="token punctuation">;</span>  b<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token string">"str"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出<span class="token operator">:</span><span class="token comment" spellcheck="true">//a->User(phone=null, name=null, age=12)</span><span class="token comment" spellcheck="true">//b->User(phone=null, name=null, age=null)</span><span class="token comment" spellcheck="true">//c->User(phone=null, name=null, age=18)</span><span class="token comment" spellcheck="true">//d->0</span><span class="token comment" spellcheck="true">//e->123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>注:还有个需要注意的地方如果是不同的jvm,比如rpc调用还是值传递,并非引用传递.这个坑我自己踩过.😔</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
